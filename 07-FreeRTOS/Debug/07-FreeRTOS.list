
07-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003508  08003508  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003508  08003508  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003508  08003508  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051a0  20000018  08003528  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051b8  08003528  000251b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005bb9  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d0  00000000  00000000  00025c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00026ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  000274d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001347  00000000  00000000  00027a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057bb  00000000  00000000  00028d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000110a0  00000000  00000000  0002e522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003f5c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b8  00000000  00000000  0003f614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034e0 	.word	0x080034e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	080034e0 	.word	0x080034e0

080001e0 <EXTI0_IRQHandler>:
{
	GS_fpEXTI_SetCallBack[A_u8EXTILine]=A_xfptr;
}
/*--------- ISR --------*/
void EXTI0_IRQHandler(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	if(GS_fpEXTI_SetCallBack[EXTI_LINE0]!=NULL)
 80001e4:	4b07      	ldr	r3, [pc, #28]	; (8000204 <EXTI0_IRQHandler+0x24>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d002      	beq.n	80001f2 <EXTI0_IRQHandler+0x12>
	{
		GS_fpEXTI_SetCallBack[EXTI_LINE0]();
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <EXTI0_IRQHandler+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4798      	blx	r3
	}
	SET_BIT(EXTI->PR,EXTI_LINE0);
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <EXTI0_IRQHandler+0x28>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a04      	ldr	r2, [pc, #16]	; (8000208 <EXTI0_IRQHandler+0x28>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6153      	str	r3, [r2, #20]
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000034 	.word	0x20000034
 8000208:	40013c00 	.word	0x40013c00

0800020c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	if(GS_fpEXTI_SetCallBack[EXTI_LINE1]!=NULL)
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <EXTI1_IRQHandler+0x24>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <EXTI1_IRQHandler+0x12>
	{
		GS_fpEXTI_SetCallBack[EXTI_LINE1]();
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI1_IRQHandler+0x24>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4798      	blx	r3
	}
	SET_BIT(EXTI->PR,EXTI_LINE1);
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <EXTI1_IRQHandler+0x28>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4a04      	ldr	r2, [pc, #16]	; (8000234 <EXTI1_IRQHandler+0x28>)
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	6153      	str	r3, [r2, #20]
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000034 	.word	0x20000034
 8000234:	40013c00 	.word	0x40013c00

08000238 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if(GS_fpEXTI_SetCallBack[EXTI_LINE2]!=NULL)
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <EXTI2_IRQHandler+0x24>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d002      	beq.n	800024a <EXTI2_IRQHandler+0x12>
	{
		GS_fpEXTI_SetCallBack[EXTI_LINE2]();
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <EXTI2_IRQHandler+0x24>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4798      	blx	r3
	}
	SET_BIT(EXTI->PR,EXTI_LINE2);
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <EXTI2_IRQHandler+0x28>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <EXTI2_IRQHandler+0x28>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6153      	str	r3, [r2, #20]
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000034 	.word	0x20000034
 8000260:	40013c00 	.word	0x40013c00

08000264 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	if(GS_fpEXTI_SetCallBack[EXTI_LINE3]!=NULL)
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <EXTI3_IRQHandler+0x24>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <EXTI3_IRQHandler+0x12>
	{
		GS_fpEXTI_SetCallBack[EXTI_LINE3]();
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <EXTI3_IRQHandler+0x24>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4798      	blx	r3
	}
	SET_BIT(EXTI->PR,EXTI_LINE3);
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <EXTI3_IRQHandler+0x28>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a04      	ldr	r2, [pc, #16]	; (800028c <EXTI3_IRQHandler+0x28>)
 800027c:	f043 0308 	orr.w	r3, r3, #8
 8000280:	6153      	str	r3, [r2, #20]
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000034 	.word	0x20000034
 800028c:	40013c00 	.word	0x40013c00

08000290 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	if(GS_fpEXTI_SetCallBack[EXTI_LINE4]!=NULL)
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <EXTI4_IRQHandler+0x24>)
 8000296:	691b      	ldr	r3, [r3, #16]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <EXTI4_IRQHandler+0x12>
	{
		GS_fpEXTI_SetCallBack[EXTI_LINE4]();
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <EXTI4_IRQHandler+0x24>)
 800029e:	691b      	ldr	r3, [r3, #16]
 80002a0:	4798      	blx	r3
	}
	SET_BIT(EXTI->PR,EXTI_LINE4);
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI4_IRQHandler+0x28>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI4_IRQHandler+0x28>)
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	6153      	str	r3, [r2, #20]
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000034 	.word	0x20000034
 80002b8:	40013c00 	.word	0x40013c00

080002bc <MGPIO_vSetPinMode>:
#include "GPIO_cfg.h"
#include "GPIO_int.h"


void MGPIO_vSetPinMode(u8 A_u8PortId, u8 A_u8PinNo , u8 A_u8Mode   )
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
 80002c6:	460b      	mov	r3, r1
 80002c8:	71bb      	strb	r3, [r7, #6]
 80002ca:	4613      	mov	r3, r2
 80002cc:	717b      	strb	r3, [r7, #5]
	switch(A_u8PortId)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	d036      	beq.n	8000342 <MGPIO_vSetPinMode+0x86>
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	dc4c      	bgt.n	8000372 <MGPIO_vSetPinMode+0xb6>
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <MGPIO_vSetPinMode+0x26>
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d018      	beq.n	8000312 <MGPIO_vSetPinMode+0x56>
	case GPIO_PORTC:
		 GPIOC->MODER &=~( (0b11) << (A_u8PinNo*2));
		 GPIOC->MODER|=( (A_u8Mode) << (A_u8PinNo*2));
				  break;
	}
}
 80002e0:	e047      	b.n	8000372 <MGPIO_vSetPinMode+0xb6>
		 GPIOA->MODER &=~( (0b11) << (A_u8PinNo*2));
 80002e2:	4b27      	ldr	r3, [pc, #156]	; (8000380 <MGPIO_vSetPinMode+0xc4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	0052      	lsls	r2, r2, #1
 80002ea:	2103      	movs	r1, #3
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	43d2      	mvns	r2, r2
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a22      	ldr	r2, [pc, #136]	; (8000380 <MGPIO_vSetPinMode+0xc4>)
 80002f6:	400b      	ands	r3, r1
 80002f8:	6013      	str	r3, [r2, #0]
		 GPIOA->MODER|=( (A_u8Mode) << (A_u8PinNo*2));
 80002fa:	4b21      	ldr	r3, [pc, #132]	; (8000380 <MGPIO_vSetPinMode+0xc4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	7979      	ldrb	r1, [r7, #5]
 8000300:	79ba      	ldrb	r2, [r7, #6]
 8000302:	0052      	lsls	r2, r2, #1
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	4611      	mov	r1, r2
 800030a:	4a1d      	ldr	r2, [pc, #116]	; (8000380 <MGPIO_vSetPinMode+0xc4>)
 800030c:	430b      	orrs	r3, r1
 800030e:	6013      	str	r3, [r2, #0]
				  break;
 8000310:	e02f      	b.n	8000372 <MGPIO_vSetPinMode+0xb6>
		 GPIOB->MODER &=~( (0b11) << (A_u8PinNo*2));
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <MGPIO_vSetPinMode+0xc8>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	79ba      	ldrb	r2, [r7, #6]
 8000318:	0052      	lsls	r2, r2, #1
 800031a:	2103      	movs	r1, #3
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	43d2      	mvns	r2, r2
 8000322:	4611      	mov	r1, r2
 8000324:	4a17      	ldr	r2, [pc, #92]	; (8000384 <MGPIO_vSetPinMode+0xc8>)
 8000326:	400b      	ands	r3, r1
 8000328:	6013      	str	r3, [r2, #0]
		 GPIOB->MODER|=( (A_u8Mode) << (A_u8PinNo*2));
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <MGPIO_vSetPinMode+0xc8>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	7979      	ldrb	r1, [r7, #5]
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MGPIO_vSetPinMode+0xc8>)
 800033c:	430b      	orrs	r3, r1
 800033e:	6013      	str	r3, [r2, #0]
				  break;
 8000340:	e017      	b.n	8000372 <MGPIO_vSetPinMode+0xb6>
		 GPIOC->MODER &=~( (0b11) << (A_u8PinNo*2));
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MGPIO_vSetPinMode+0xcc>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0052      	lsls	r2, r2, #1
 800034a:	2103      	movs	r1, #3
 800034c:	fa01 f202 	lsl.w	r2, r1, r2
 8000350:	43d2      	mvns	r2, r2
 8000352:	4611      	mov	r1, r2
 8000354:	4a0c      	ldr	r2, [pc, #48]	; (8000388 <MGPIO_vSetPinMode+0xcc>)
 8000356:	400b      	ands	r3, r1
 8000358:	6013      	str	r3, [r2, #0]
		 GPIOC->MODER|=( (A_u8Mode) << (A_u8PinNo*2));
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MGPIO_vSetPinMode+0xcc>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	7979      	ldrb	r1, [r7, #5]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	0052      	lsls	r2, r2, #1
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	4611      	mov	r1, r2
 800036a:	4a07      	ldr	r2, [pc, #28]	; (8000388 <MGPIO_vSetPinMode+0xcc>)
 800036c:	430b      	orrs	r3, r1
 800036e:	6013      	str	r3, [r2, #0]
				  break;
 8000370:	bf00      	nop
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40020000 	.word	0x40020000
 8000384:	40020400 	.word	0x40020400
 8000388:	40020800 	.word	0x40020800

0800038c <MGPIO_vSetPinOutputType>:

void MGPIO_vSetPinOutputType(u8 A_u8PortId, u8 A_u8PinNo ,u8 A_u8OutType   )
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
 8000396:	460b      	mov	r3, r1
 8000398:	71bb      	strb	r3, [r7, #6]
 800039a:	4613      	mov	r3, r2
 800039c:	717b      	strb	r3, [r7, #5]
	if(A_u8OutType==GPIO_OTYPE_OPENDRAIN)
 800039e:	797b      	ldrb	r3, [r7, #5]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d12a      	bne.n	80003fa <MGPIO_vSetPinOutputType+0x6e>
	{
	switch(A_u8PortId)
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d01c      	beq.n	80003e4 <MGPIO_vSetPinOutputType+0x58>
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	dc53      	bgt.n	8000456 <MGPIO_vSetPinOutputType+0xca>
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <MGPIO_vSetPinOutputType+0x2c>
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d00b      	beq.n	80003ce <MGPIO_vSetPinOutputType+0x42>
		 case GPIO_PORTC:
			  CLR_BIT(GPIOC->OTYPER,A_u8PinNo);
			  break;
		}
	}
}
 80003b6:	e04e      	b.n	8000456 <MGPIO_vSetPinOutputType+0xca>
			 SET_BIT(GPIOA->OTYPER,A_u8PinNo);
 80003b8:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <MGPIO_vSetPinOutputType+0xd8>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	79ba      	ldrb	r2, [r7, #6]
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a27      	ldr	r2, [pc, #156]	; (8000464 <MGPIO_vSetPinOutputType+0xd8>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6053      	str	r3, [r2, #4]
			 break;
 80003cc:	e043      	b.n	8000456 <MGPIO_vSetPinOutputType+0xca>
			 SET_BIT(GPIOB->OTYPER,A_u8PinNo);
 80003ce:	4b26      	ldr	r3, [pc, #152]	; (8000468 <MGPIO_vSetPinOutputType+0xdc>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	79ba      	ldrb	r2, [r7, #6]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	4611      	mov	r1, r2
 80003dc:	4a22      	ldr	r2, [pc, #136]	; (8000468 <MGPIO_vSetPinOutputType+0xdc>)
 80003de:	430b      	orrs	r3, r1
 80003e0:	6053      	str	r3, [r2, #4]
			 break;
 80003e2:	e038      	b.n	8000456 <MGPIO_vSetPinOutputType+0xca>
 			 SET_BIT(GPIOC->OTYPER,A_u8PinNo);
 80003e4:	4b21      	ldr	r3, [pc, #132]	; (800046c <MGPIO_vSetPinOutputType+0xe0>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	79ba      	ldrb	r2, [r7, #6]
 80003ea:	2101      	movs	r1, #1
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	4611      	mov	r1, r2
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <MGPIO_vSetPinOutputType+0xe0>)
 80003f4:	430b      	orrs	r3, r1
 80003f6:	6053      	str	r3, [r2, #4]
			 break;
 80003f8:	e02d      	b.n	8000456 <MGPIO_vSetPinOutputType+0xca>
	switch(A_u8PortId)
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d01e      	beq.n	800043e <MGPIO_vSetPinOutputType+0xb2>
 8000400:	2b02      	cmp	r3, #2
 8000402:	dc28      	bgt.n	8000456 <MGPIO_vSetPinOutputType+0xca>
 8000404:	2b00      	cmp	r3, #0
 8000406:	d002      	beq.n	800040e <MGPIO_vSetPinOutputType+0x82>
 8000408:	2b01      	cmp	r3, #1
 800040a:	d00c      	beq.n	8000426 <MGPIO_vSetPinOutputType+0x9a>
}
 800040c:	e023      	b.n	8000456 <MGPIO_vSetPinOutputType+0xca>
			  CLR_BIT(GPIOA->OTYPER,A_u8PinNo);
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MGPIO_vSetPinOutputType+0xd8>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	43d2      	mvns	r2, r2
 800041c:	4611      	mov	r1, r2
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <MGPIO_vSetPinOutputType+0xd8>)
 8000420:	400b      	ands	r3, r1
 8000422:	6053      	str	r3, [r2, #4]
			  break;
 8000424:	e017      	b.n	8000456 <MGPIO_vSetPinOutputType+0xca>
			  CLR_BIT(GPIOB->OTYPER,A_u8PinNo);
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MGPIO_vSetPinOutputType+0xdc>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	79ba      	ldrb	r2, [r7, #6]
 800042c:	2101      	movs	r1, #1
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <MGPIO_vSetPinOutputType+0xdc>)
 8000438:	400b      	ands	r3, r1
 800043a:	6053      	str	r3, [r2, #4]
			  break;
 800043c:	e00b      	b.n	8000456 <MGPIO_vSetPinOutputType+0xca>
			  CLR_BIT(GPIOC->OTYPER,A_u8PinNo);
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MGPIO_vSetPinOutputType+0xe0>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	79ba      	ldrb	r2, [r7, #6]
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	43d2      	mvns	r2, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a07      	ldr	r2, [pc, #28]	; (800046c <MGPIO_vSetPinOutputType+0xe0>)
 8000450:	400b      	ands	r3, r1
 8000452:	6053      	str	r3, [r2, #4]
			  break;
 8000454:	bf00      	nop
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40020000 	.word	0x40020000
 8000468:	40020400 	.word	0x40020400
 800046c:	40020800 	.word	0x40020800

08000470 <MGPIO_vSetPinOutputSpeed>:

void MGPIO_vSetPinOutputSpeed(u8 A_u8PortId, u8 A_u8PinNo , u8 A_u8OutSpeed )
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
 800047a:	460b      	mov	r3, r1
 800047c:	71bb      	strb	r3, [r7, #6]
 800047e:	4613      	mov	r3, r2
 8000480:	717b      	strb	r3, [r7, #5]
	switch(A_u8PortId)
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d036      	beq.n	80004f6 <MGPIO_vSetPinOutputSpeed+0x86>
 8000488:	2b02      	cmp	r3, #2
 800048a:	dc4c      	bgt.n	8000526 <MGPIO_vSetPinOutputSpeed+0xb6>
 800048c:	2b00      	cmp	r3, #0
 800048e:	d002      	beq.n	8000496 <MGPIO_vSetPinOutputSpeed+0x26>
 8000490:	2b01      	cmp	r3, #1
 8000492:	d018      	beq.n	80004c6 <MGPIO_vSetPinOutputSpeed+0x56>
	case GPIO_PORTC:
		 GPIOC->OSPEEDR &= ~((0b11) << (A_u8PinNo*2));
		 GPIOC->OSPEEDR |= ((A_u8OutSpeed) << (A_u8PinNo*2));
		 break;
	}
}
 8000494:	e047      	b.n	8000526 <MGPIO_vSetPinOutputSpeed+0xb6>
		 GPIOA->OSPEEDR &= ~((0b11) << (A_u8PinNo*2));
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <MGPIO_vSetPinOutputSpeed+0xc4>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	79ba      	ldrb	r2, [r7, #6]
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	2103      	movs	r1, #3
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	43d2      	mvns	r2, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a22      	ldr	r2, [pc, #136]	; (8000534 <MGPIO_vSetPinOutputSpeed+0xc4>)
 80004aa:	400b      	ands	r3, r1
 80004ac:	6093      	str	r3, [r2, #8]
		 GPIOA->OSPEEDR |= ((A_u8OutSpeed) << (A_u8PinNo*2));
 80004ae:	4b21      	ldr	r3, [pc, #132]	; (8000534 <MGPIO_vSetPinOutputSpeed+0xc4>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	7979      	ldrb	r1, [r7, #5]
 80004b4:	79ba      	ldrb	r2, [r7, #6]
 80004b6:	0052      	lsls	r2, r2, #1
 80004b8:	fa01 f202 	lsl.w	r2, r1, r2
 80004bc:	4611      	mov	r1, r2
 80004be:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <MGPIO_vSetPinOutputSpeed+0xc4>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	6093      	str	r3, [r2, #8]
	     break;
 80004c4:	e02f      	b.n	8000526 <MGPIO_vSetPinOutputSpeed+0xb6>
		 GPIOB->OSPEEDR &= ~((0b11) << (A_u8PinNo*2));
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <MGPIO_vSetPinOutputSpeed+0xc8>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	79ba      	ldrb	r2, [r7, #6]
 80004cc:	0052      	lsls	r2, r2, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f202 	lsl.w	r2, r1, r2
 80004d4:	43d2      	mvns	r2, r2
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a17      	ldr	r2, [pc, #92]	; (8000538 <MGPIO_vSetPinOutputSpeed+0xc8>)
 80004da:	400b      	ands	r3, r1
 80004dc:	6093      	str	r3, [r2, #8]
		 GPIOB->OSPEEDR |= ((A_u8OutSpeed) << (A_u8PinNo*2));
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MGPIO_vSetPinOutputSpeed+0xc8>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	7979      	ldrb	r1, [r7, #5]
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	0052      	lsls	r2, r2, #1
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MGPIO_vSetPinOutputSpeed+0xc8>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6093      	str	r3, [r2, #8]
		 break;
 80004f4:	e017      	b.n	8000526 <MGPIO_vSetPinOutputSpeed+0xb6>
		 GPIOC->OSPEEDR &= ~((0b11) << (A_u8PinNo*2));
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MGPIO_vSetPinOutputSpeed+0xcc>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	79ba      	ldrb	r2, [r7, #6]
 80004fc:	0052      	lsls	r2, r2, #1
 80004fe:	2103      	movs	r1, #3
 8000500:	fa01 f202 	lsl.w	r2, r1, r2
 8000504:	43d2      	mvns	r2, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <MGPIO_vSetPinOutputSpeed+0xcc>)
 800050a:	400b      	ands	r3, r1
 800050c:	6093      	str	r3, [r2, #8]
		 GPIOC->OSPEEDR |= ((A_u8OutSpeed) << (A_u8PinNo*2));
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MGPIO_vSetPinOutputSpeed+0xcc>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	7979      	ldrb	r1, [r7, #5]
 8000514:	79ba      	ldrb	r2, [r7, #6]
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <MGPIO_vSetPinOutputSpeed+0xcc>)
 8000520:	430b      	orrs	r3, r1
 8000522:	6093      	str	r3, [r2, #8]
		 break;
 8000524:	bf00      	nop
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40020000 	.word	0x40020000
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800

08000540 <MGPIO_vSetPinInputPull>:

void MGPIO_vSetPinInputPull(u8 A_u8PortId,u8 A_u8PinNo ,u8 A_u8PullType )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	460b      	mov	r3, r1
 800054c:	71bb      	strb	r3, [r7, #6]
 800054e:	4613      	mov	r3, r2
 8000550:	717b      	strb	r3, [r7, #5]
	switch(A_u8PortId)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d036      	beq.n	80005c6 <MGPIO_vSetPinInputPull+0x86>
 8000558:	2b02      	cmp	r3, #2
 800055a:	dc4c      	bgt.n	80005f6 <MGPIO_vSetPinInputPull+0xb6>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d002      	beq.n	8000566 <MGPIO_vSetPinInputPull+0x26>
 8000560:	2b01      	cmp	r3, #1
 8000562:	d018      	beq.n	8000596 <MGPIO_vSetPinInputPull+0x56>
	case GPIO_PORTC:
		 GPIOC->PUPDR &= ~((0b11) << (A_u8PinNo*2));
		 GPIOC->PUPDR |= ((A_u8PullType) << (A_u8PinNo*2));
		 break;
	}
}
 8000564:	e047      	b.n	80005f6 <MGPIO_vSetPinInputPull+0xb6>
		 GPIOA->PUPDR &= ~((0b11) << (A_u8PinNo*2));
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MGPIO_vSetPinInputPull+0xc4>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	79ba      	ldrb	r2, [r7, #6]
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	2103      	movs	r1, #3
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	43d2      	mvns	r2, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a22      	ldr	r2, [pc, #136]	; (8000604 <MGPIO_vSetPinInputPull+0xc4>)
 800057a:	400b      	ands	r3, r1
 800057c:	60d3      	str	r3, [r2, #12]
		 GPIOA->PUPDR |= ((A_u8PullType) << (A_u8PinNo*2));
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MGPIO_vSetPinInputPull+0xc4>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	7979      	ldrb	r1, [r7, #5]
 8000584:	79ba      	ldrb	r2, [r7, #6]
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	fa01 f202 	lsl.w	r2, r1, r2
 800058c:	4611      	mov	r1, r2
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <MGPIO_vSetPinInputPull+0xc4>)
 8000590:	430b      	orrs	r3, r1
 8000592:	60d3      	str	r3, [r2, #12]
		 break;
 8000594:	e02f      	b.n	80005f6 <MGPIO_vSetPinInputPull+0xb6>
		 GPIOB->PUPDR &= ~((0b11) << (A_u8PinNo*2));
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MGPIO_vSetPinInputPull+0xc8>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	79ba      	ldrb	r2, [r7, #6]
 800059c:	0052      	lsls	r2, r2, #1
 800059e:	2103      	movs	r1, #3
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	43d2      	mvns	r2, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a17      	ldr	r2, [pc, #92]	; (8000608 <MGPIO_vSetPinInputPull+0xc8>)
 80005aa:	400b      	ands	r3, r1
 80005ac:	60d3      	str	r3, [r2, #12]
		 GPIOB->PUPDR |= ((A_u8PullType) << (A_u8PinNo*2));
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MGPIO_vSetPinInputPull+0xc8>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	7979      	ldrb	r1, [r7, #5]
 80005b4:	79ba      	ldrb	r2, [r7, #6]
 80005b6:	0052      	lsls	r2, r2, #1
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MGPIO_vSetPinInputPull+0xc8>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	60d3      	str	r3, [r2, #12]
		 break;
 80005c4:	e017      	b.n	80005f6 <MGPIO_vSetPinInputPull+0xb6>
		 GPIOC->PUPDR &= ~((0b11) << (A_u8PinNo*2));
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MGPIO_vSetPinInputPull+0xcc>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	79ba      	ldrb	r2, [r7, #6]
 80005cc:	0052      	lsls	r2, r2, #1
 80005ce:	2103      	movs	r1, #3
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <MGPIO_vSetPinInputPull+0xcc>)
 80005da:	400b      	ands	r3, r1
 80005dc:	60d3      	str	r3, [r2, #12]
		 GPIOC->PUPDR |= ((A_u8PullType) << (A_u8PinNo*2));
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MGPIO_vSetPinInputPull+0xcc>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	7979      	ldrb	r1, [r7, #5]
 80005e4:	79ba      	ldrb	r2, [r7, #6]
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <MGPIO_vSetPinInputPull+0xcc>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	60d3      	str	r3, [r2, #12]
		 break;
 80005f4:	bf00      	nop
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800

08000610 <MGPIO_vTogPinVal>:
			  break;
		}
	}
}
void MGPIO_vTogPinVal(u8 A_u8PortId,u8 A_u8PinNo)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
	  switch(A_u8PortId)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d01c      	beq.n	8000660 <MGPIO_vTogPinVal+0x50>
 8000626:	2b02      	cmp	r3, #2
 8000628:	dc25      	bgt.n	8000676 <MGPIO_vTogPinVal+0x66>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <MGPIO_vTogPinVal+0x24>
 800062e:	2b01      	cmp	r3, #1
 8000630:	d00b      	beq.n	800064a <MGPIO_vTogPinVal+0x3a>
			 break;
		case GPIO_PORTC:
			 TOG_BIT(GPIOC->ODR,A_u8PinNo);
			 break;
			}
}
 8000632:	e020      	b.n	8000676 <MGPIO_vTogPinVal+0x66>
			 TOG_BIT(GPIOA->ODR,A_u8PinNo);
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MGPIO_vTogPinVal+0x74>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	79ba      	ldrb	r2, [r7, #6]
 800063a:	2101      	movs	r1, #1
 800063c:	fa01 f202 	lsl.w	r2, r1, r2
 8000640:	4611      	mov	r1, r2
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <MGPIO_vTogPinVal+0x74>)
 8000644:	404b      	eors	r3, r1
 8000646:	6153      	str	r3, [r2, #20]
			 break;
 8000648:	e015      	b.n	8000676 <MGPIO_vTogPinVal+0x66>
			TOG_BIT(GPIOB->ODR,A_u8PinNo);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MGPIO_vTogPinVal+0x78>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	79ba      	ldrb	r2, [r7, #6]
 8000650:	2101      	movs	r1, #1
 8000652:	fa01 f202 	lsl.w	r2, r1, r2
 8000656:	4611      	mov	r1, r2
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <MGPIO_vTogPinVal+0x78>)
 800065a:	404b      	eors	r3, r1
 800065c:	6153      	str	r3, [r2, #20]
			 break;
 800065e:	e00a      	b.n	8000676 <MGPIO_vTogPinVal+0x66>
			 TOG_BIT(GPIOC->ODR,A_u8PinNo);
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MGPIO_vTogPinVal+0x7c>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	2101      	movs	r1, #1
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <MGPIO_vTogPinVal+0x7c>)
 8000670:	404b      	eors	r3, r1
 8000672:	6153      	str	r3, [r2, #20]
			 break;
 8000674:	bf00      	nop
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800

08000690 <MGPIO_vInit>:
		}
	}
}

void MGPIO_vInit(MGPIO_Config_t* A_xPinConfig)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	MGPIO_vSetPinMode(A_xPinConfig->Port,A_xPinConfig->Pin,A_xPinConfig->Mode);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7818      	ldrb	r0, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7859      	ldrb	r1, [r3, #1]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	789b      	ldrb	r3, [r3, #2]
 80006a4:	461a      	mov	r2, r3
 80006a6:	f7ff fe09 	bl	80002bc <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputType(A_xPinConfig->Port,A_xPinConfig->Pin,A_xPinConfig->OutputType);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7818      	ldrb	r0, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7859      	ldrb	r1, [r3, #1]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	78db      	ldrb	r3, [r3, #3]
 80006b6:	461a      	mov	r2, r3
 80006b8:	f7ff fe68 	bl	800038c <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(A_xPinConfig->Port,A_xPinConfig->Pin,A_xPinConfig->OutputSpeed);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7818      	ldrb	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7859      	ldrb	r1, [r3, #1]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	461a      	mov	r2, r3
 80006ca:	f7ff fed1 	bl	8000470 <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinInputPull(A_xPinConfig->Port,A_xPinConfig->Pin,A_xPinConfig->InputPull);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7818      	ldrb	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7859      	ldrb	r1, [r3, #1]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	461a      	mov	r2, r3
 80006dc:	f7ff ff30 	bl	8000540 <MGPIO_vSetPinInputPull>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MRCC_vInit>:




void MRCC_vInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	/*1- CSS (ON/OFF) */
#if RCC_CSS_ENABLE==ENABLE
	SET_BIT(RCC->CR,CSSON);
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MRCC_vInit+0x54>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MRCC_vInit+0x54>)
 80006f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006f6:	6013      	str	r3, [r2, #0]
#endif
	/*2- HSE_BYP */
#if RCC_HSE_BYPASS==BYPASS
	SET_BIT(RCC->CR,HSEBYP);
#elif RCC_HSE_BYPASS==NOT_BYPASS
	CLR_BIT(RCC->CR,HSEBYP);
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MRCC_vInit+0x54>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MRCC_vInit+0x54>)
 80006fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000702:	6013      	str	r3, [r2, #0]
#else
	CLR_BITT(RCC->CR,HSEBYP);
#endif

	/*3- Buses Prescalers */
	RCC->CFGR|= (RCC_AHB1_CLK << 4) | (RCC_APB1_CLK << 10) | (RCC_APB2_CLK<< 13 );
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MRCC_vInit+0x54>)
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <MRCC_vInit+0x54>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	6093      	str	r3, [r2, #8]
#if   RCC_SYSTEM_CLK==RCC_HSI
	  CLR_BIT(RCC->CFGR,SW0);
	  CLR_BIT(RCC->CFGR,SW1);
	  SET_BIT(RCC->CR,HSION);
#elif RCC_SYSTEM_CLK==RCC_HSE
	  SET_BIT(RCC->CFGR,SW0);
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MRCC_vInit+0x54>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <MRCC_vInit+0x54>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6093      	str	r3, [r2, #8]
	  CLR_BIT(RCC->CFGR,SW1);
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <MRCC_vInit+0x54>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <MRCC_vInit+0x54>)
 800071e:	f023 0302 	bic.w	r3, r3, #2
 8000722:	6093      	str	r3, [r2, #8]
	  SET_BIT(RCC->CR,HSEON);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <MRCC_vInit+0x54>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <MRCC_vInit+0x54>)
 800072a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800072e:	6013      	str	r3, [r2, #0]
#else
#warning "System clk config is invalid"
#endif


}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <MRCC_vEnableClock>:

void MRCC_vEnableClock(u32 A_u32BusId, u32 A_u32PeripheralId)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
 switch(A_u32BusId)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3b01      	subs	r3, #1
 800074e:	2b03      	cmp	r3, #3
 8000750:	d836      	bhi.n	80007c0 <MRCC_vEnableClock+0x80>
 8000752:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <MRCC_vEnableClock+0x18>)
 8000754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000758:	08000769 	.word	0x08000769
 800075c:	0800077f 	.word	0x0800077f
 8000760:	08000795 	.word	0x08000795
 8000764:	080007ab 	.word	0x080007ab
 {
 case RCC_AHB1 : SET_BIT(RCC->AHB1ENR,A_u32PeripheralId); break;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MRCC_vEnableClock+0x90>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	2101      	movs	r1, #1
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MRCC_vEnableClock+0x90>)
 8000778:	430b      	orrs	r3, r1
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
 800077c:	e021      	b.n	80007c2 <MRCC_vEnableClock+0x82>
 case RCC_AHB2 : SET_BIT(RCC->AHB2ENR,A_u32PeripheralId); break;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MRCC_vEnableClock+0x90>)
 8000780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000782:	2101      	movs	r1, #1
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MRCC_vEnableClock+0x90>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6353      	str	r3, [r2, #52]	; 0x34
 8000792:	e016      	b.n	80007c2 <MRCC_vEnableClock+0x82>
 case RCC_APB1 : SET_BIT(RCC->APB1ENR,A_u32PeripheralId); break;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MRCC_vEnableClock+0x90>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	2101      	movs	r1, #1
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	4611      	mov	r1, r2
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <MRCC_vEnableClock+0x90>)
 80007a4:	430b      	orrs	r3, r1
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	e00b      	b.n	80007c2 <MRCC_vEnableClock+0x82>
 case RCC_APB2 : SET_BIT(RCC->APB2ENR,A_u32PeripheralId); break;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MRCC_vEnableClock+0x90>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	2101      	movs	r1, #1
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	fa01 f202 	lsl.w	r2, r1, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <MRCC_vEnableClock+0x90>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6453      	str	r3, [r2, #68]	; 0x44
 80007be:	e000      	b.n	80007c2 <MRCC_vEnableClock+0x82>
 default :break;
 80007c0:	bf00      	nop

 }

}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80007e0:	f001 fc64 	bl	80020ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80007e4:	4b65      	ldr	r3, [pc, #404]	; (800097c <pvPortMalloc+0x1a8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80007ec:	f000 f934 	bl	8000a58 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80007f0:	4b63      	ldr	r3, [pc, #396]	; (8000980 <pvPortMalloc+0x1ac>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4013      	ands	r3, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f040 80a7 	bne.w	800094c <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d02d      	beq.n	8000860 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8000804:	2208      	movs	r2, #8
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	d227      	bcs.n	8000860 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8000810:	2208      	movs	r2, #8
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	2b00      	cmp	r3, #0
 8000820:	d021      	beq.n	8000866 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f023 0307 	bic.w	r3, r3, #7
 8000828:	3308      	adds	r3, #8
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	d214      	bcs.n	800085a <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f023 0307 	bic.w	r3, r3, #7
 8000836:	3308      	adds	r3, #8
 8000838:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	2b00      	cmp	r3, #0
 8000842:	d010      	beq.n	8000866 <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000848:	f383 8811 	msr	BASEPRI, r3
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000856:	bf00      	nop
 8000858:	e7fe      	b.n	8000858 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800085e:	e002      	b.n	8000866 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	e000      	b.n	8000868 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000866:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d06e      	beq.n	800094c <pvPortMalloc+0x178>
 800086e:	4b45      	ldr	r3, [pc, #276]	; (8000984 <pvPortMalloc+0x1b0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	d869      	bhi.n	800094c <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <pvPortMalloc+0x1b4>)
 800087a:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800087c:	4b42      	ldr	r3, [pc, #264]	; (8000988 <pvPortMalloc+0x1b4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000882:	e004      	b.n	800088e <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	d903      	bls.n	80008a0 <pvPortMalloc+0xcc>
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f1      	bne.n	8000884 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <pvPortMalloc+0x1a8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d050      	beq.n	800094c <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2208      	movs	r2, #8
 80008b0:	4413      	add	r3, r2
 80008b2:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	2308      	movs	r3, #8
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d91f      	bls.n	800090c <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80008cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00a      	beq.n	80008f4 <pvPortMalloc+0x120>
        __asm volatile
 80008de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e2:	f383 8811 	msr	BASEPRI, r3
 80008e6:	f3bf 8f6f 	isb	sy
 80008ea:	f3bf 8f4f 	dsb	sy
 80008ee:	613b      	str	r3, [r7, #16]
    }
 80008f0:	bf00      	nop
 80008f2:	e7fe      	b.n	80008f2 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	1ad2      	subs	r2, r2, r3
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000906:	69b8      	ldr	r0, [r7, #24]
 8000908:	f000 f908 	bl	8000b1c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <pvPortMalloc+0x1b0>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <pvPortMalloc+0x1b0>)
 8000918:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <pvPortMalloc+0x1b0>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <pvPortMalloc+0x1b8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d203      	bcs.n	800092e <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <pvPortMalloc+0x1b0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <pvPortMalloc+0x1b8>)
 800092c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <pvPortMalloc+0x1ac>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	431a      	orrs	r2, r3
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <pvPortMalloc+0x1bc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a11      	ldr	r2, [pc, #68]	; (8000990 <pvPortMalloc+0x1bc>)
 800094a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800094c:	f001 fbbc 	bl	80020c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00a      	beq.n	8000970 <pvPortMalloc+0x19c>
        __asm volatile
 800095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095e:	f383 8811 	msr	BASEPRI, r3
 8000962:	f3bf 8f6f 	isb	sy
 8000966:	f3bf 8f4f 	dsb	sy
 800096a:	60fb      	str	r3, [r7, #12]
    }
 800096c:	bf00      	nop
 800096e:	e7fe      	b.n	800096e <pvPortMalloc+0x19a>
    return pvReturn;
 8000970:	69fb      	ldr	r3, [r7, #28]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000507c 	.word	0x2000507c
 8000980:	20005090 	.word	0x20005090
 8000984:	20005080 	.word	0x20005080
 8000988:	20005074 	.word	0x20005074
 800098c:	20005084 	.word	0x20005084
 8000990:	20005088 	.word	0x20005088

08000994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d04d      	beq.n	8000a42 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80009a6:	2308      	movs	r3, #8
 80009a8:	425b      	negs	r3, r3
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	4413      	add	r3, r2
 80009ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <vPortFree+0xb8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4013      	ands	r3, r2
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10a      	bne.n	80009d8 <vPortFree+0x44>
        __asm volatile
 80009c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c6:	f383 8811 	msr	BASEPRI, r3
 80009ca:	f3bf 8f6f 	isb	sy
 80009ce:	f3bf 8f4f 	dsb	sy
 80009d2:	60fb      	str	r3, [r7, #12]
    }
 80009d4:	bf00      	nop
 80009d6:	e7fe      	b.n	80009d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00a      	beq.n	80009f6 <vPortFree+0x62>
        __asm volatile
 80009e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e4:	f383 8811 	msr	BASEPRI, r3
 80009e8:	f3bf 8f6f 	isb	sy
 80009ec:	f3bf 8f4f 	dsb	sy
 80009f0:	60bb      	str	r3, [r7, #8]
    }
 80009f2:	bf00      	nop
 80009f4:	e7fe      	b.n	80009f4 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <vPortFree+0xb8>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d01e      	beq.n	8000a42 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d11a      	bne.n	8000a42 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <vPortFree+0xb8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	401a      	ands	r2, r3
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8000a1c:	f001 fb46 	bl	80020ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <vPortFree+0xbc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <vPortFree+0xbc>)
 8000a2c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000a2e:	6938      	ldr	r0, [r7, #16]
 8000a30:	f000 f874 	bl	8000b1c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <vPortFree+0xc0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <vPortFree+0xc0>)
 8000a3c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000a3e:	f001 fb43 	bl	80020c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20005090 	.word	0x20005090
 8000a50:	20005080 	.word	0x20005080
 8000a54:	2000508c 	.word	0x2000508c

08000a58 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a5e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000a62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <prvHeapInit+0xac>)
 8000a66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00c      	beq.n	8000a8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3307      	adds	r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f023 0307 	bic.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <prvHeapInit+0xac>)
 8000a88:	4413      	add	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <prvHeapInit+0xb0>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <prvHeapInit+0xb0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f023 0307 	bic.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <prvHeapInit+0xb4>)
 8000ab8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <prvHeapInit+0xb4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <prvHeapInit+0xb4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	1ad2      	subs	r2, r2, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <prvHeapInit+0xb4>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <prvHeapInit+0xb8>)
 8000ae6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <prvHeapInit+0xbc>)
 8000aee:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <prvHeapInit+0xc0>)
 8000af2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20000074 	.word	0x20000074
 8000b08:	20005074 	.word	0x20005074
 8000b0c:	2000507c 	.word	0x2000507c
 8000b10:	20005084 	.word	0x20005084
 8000b14:	20005080 	.word	0x20005080
 8000b18:	20005090 	.word	0x20005090

08000b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <prvInsertBlockIntoFreeList+0xac>)
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e002      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x14>
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d8f7      	bhi.n	8000b2a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	4413      	add	r3, r2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d108      	bne.n	8000b5e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	441a      	add	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d118      	bne.n	8000ba4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <prvInsertBlockIntoFreeList+0xb0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d00d      	beq.n	8000b9a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	441a      	add	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	e008      	b.n	8000bac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <prvInsertBlockIntoFreeList+0xb0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e003      	b.n	8000bac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d002      	beq.n	8000bba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20005074 	.word	0x20005074
 8000bcc:	2000507c 	.word	0x2000507c

08000bd0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f103 0208 	add.w	r2, r3, #8
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f103 0208 	add.w	r2, r3, #8
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f103 0208 	add.w	r2, r3, #8
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d103      	bne.n	8000c4a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e00c      	b.n	8000c64 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3308      	adds	r3, #8
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e002      	b.n	8000c58 <vListInsert+0x2e>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d2f6      	bcs.n	8000c52 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6892      	ldr	r2, [r2, #8]
 8000cb2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6852      	ldr	r2, [r2, #4]
 8000cbc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d103      	bne.n	8000cd0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <Task_LEDRED>:
		{GPIO_PORTA, GPIO_PIN0, GPIO_MODE_OUTPUT, GPIO_SPEED_LOW  , GPIO_OTYPE_PUSHPULL }
		,{GPIO_PORTA, GPIO_PIN1, GPIO_MODE_OUTPUT, GPIO_SPEED_LOW  , GPIO_OTYPE_PUSHPULL }
};

void Task_LEDRED(void * pvParams)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	(void)pvParams;
	while(1)
	{
		rgbSem_Status= xSemaphoreTake(rgbSem ,600);
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <Task_LEDRED+0x44>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fd75 	bl	80017f0 <xQueueSemaphoreTake>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <Task_LEDRED+0x48>)
 8000d0a:	6013      	str	r3, [r2, #0]
		if (rgbSem_Status== pdPASS)
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <Task_LEDRED+0x48>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d1f1      	bne.n	8000cf8 <Task_LEDRED+0x8>
		{
			MGPIO_vTogPinVal(GPIO_PORTA,GPIO_PIN0);
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fc7a 	bl	8000610 <MGPIO_vTogPinVal>
			xSemaphoreGive(rgbSem);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <Task_LEDRED+0x44>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	f000 fb85 	bl	8001434 <xQueueGenericSend>
			vTaskDelay(500);
 8000d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2e:	f001 f937 	bl	8001fa0 <vTaskDelay>
		rgbSem_Status= xSemaphoreTake(rgbSem ,600);
 8000d32:	e7e1      	b.n	8000cf8 <Task_LEDRED+0x8>
 8000d34:	20005094 	.word	0x20005094
 8000d38:	20005098 	.word	0x20005098

08000d3c <Task_LEDBLUE>:
		}

	}
}
void Task_LEDBLUE(void * pvParams)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	(void)pvParams;
	while(1)
	{

		rgbSem_Status= xSemaphoreTake(rgbSem ,600);
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <Task_LEDBLUE+0x44>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fd4f 	bl	80017f0 <xQueueSemaphoreTake>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <Task_LEDBLUE+0x48>)
 8000d56:	6013      	str	r3, [r2, #0]
		if (rgbSem_Status == pdPASS)
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <Task_LEDBLUE+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d1f1      	bne.n	8000d44 <Task_LEDBLUE+0x8>
		{


			xSemaphoreGive(rgbSem);
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <Task_LEDBLUE+0x44>)
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	2300      	movs	r3, #0
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f000 fb63 	bl	8001434 <xQueueGenericSend>
			vTaskDelay(500);
 8000d6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d72:	f001 f915 	bl	8001fa0 <vTaskDelay>
			MGPIO_vTogPinVal(GPIO_PORTA,GPIO_PIN1);
 8000d76:	2101      	movs	r1, #1
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fc49 	bl	8000610 <MGPIO_vTogPinVal>
		rgbSem_Status= xSemaphoreTake(rgbSem ,600);
 8000d7e:	e7e1      	b.n	8000d44 <Task_LEDBLUE+0x8>
 8000d80:	20005094 	.word	0x20005094
 8000d84:	20005098 	.word	0x20005098

08000d88 <main>:

	}
}

int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af02      	add	r7, sp, #8
 
	MRCC_vInit();
 8000d8e:	f7ff fcab 	bl	80006e8 <MRCC_vInit>
	MRCC_vEnableClock(RCC_AHB1, RCC_GPIOA_EN);
 8000d92:	2100      	movs	r1, #0
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff fcd3 	bl	8000740 <MRCC_vEnableClock>

	for(int i=0; i<	(sizeof(pin_arr)/sizeof(pin_arr[0])); i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	e00b      	b.n	8000db8 <main+0x30>
	{
			MGPIO_vInit(&pin_arr[i]);
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <main+0x8c>)
 8000daa:	4413      	add	r3, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc6f 	bl	8000690 <MGPIO_vInit>
	for(int i=0; i<	(sizeof(pin_arr)/sizeof(pin_arr[0])); i++)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d9f0      	bls.n	8000da0 <main+0x18>
	}

	vSemaphoreCreateBinary(rgbSem);
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 fac8 	bl	8001358 <xQueueGenericCreate>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <main+0x90>)
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <main+0x90>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <main+0x5c>
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <main+0x90>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	f000 fb28 	bl	8001434 <xQueueGenericSend>

	xTaskCreate(Task_LEDRED , NULL ,50, NULL ,1,NULL);
 8000de4:	2300      	movs	r3, #0
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	2232      	movs	r2, #50	; 0x32
 8000df0:	2100      	movs	r1, #0
 8000df2:	480a      	ldr	r0, [pc, #40]	; (8000e1c <main+0x94>)
 8000df4:	f000 ff64 	bl	8001cc0 <xTaskCreate>
	xTaskCreate(Task_LEDBLUE, NULL ,50, NULL ,1,NULL);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2232      	movs	r2, #50	; 0x32
 8000e04:	2100      	movs	r1, #0
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <main+0x98>)
 8000e08:	f000 ff5a 	bl	8001cc0 <xTaskCreate>



	vTaskStartScheduler();
 8000e0c:	f001 f8fc 	bl	8002008 <vTaskStartScheduler>
	while(1)
 8000e10:	e7fe      	b.n	8000e10 <main+0x88>
 8000e12:	bf00      	nop
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20005094 	.word	0x20005094
 8000e1c:	08000cf1 	.word	0x08000cf1
 8000e20:	08000d3d 	.word	0x08000d3d

08000e24 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3b04      	subs	r3, #4
 8000e34:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3b04      	subs	r3, #4
 8000e42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f023 0201 	bic.w	r2, r3, #1
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3b04      	subs	r3, #4
 8000e52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <pxPortInitialiseStack+0x64>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3b14      	subs	r3, #20
 8000e5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3b04      	subs	r3, #4
 8000e6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f06f 0202 	mvn.w	r2, #2
 8000e72:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3b20      	subs	r3, #32
 8000e78:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	08000e8d 	.word	0x08000e8d

08000e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <prvTaskExitError+0x54>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9e:	d00a      	beq.n	8000eb6 <prvTaskExitError+0x2a>
        __asm volatile
 8000ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
 8000eac:	f3bf 8f4f 	dsb	sy
 8000eb0:	60fb      	str	r3, [r7, #12]
    }
 8000eb2:	bf00      	nop
 8000eb4:	e7fe      	b.n	8000eb4 <prvTaskExitError+0x28>
        __asm volatile
 8000eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eba:	f383 8811 	msr	BASEPRI, r3
 8000ebe:	f3bf 8f6f 	isb	sy
 8000ec2:	f3bf 8f4f 	dsb	sy
 8000ec6:	60bb      	str	r3, [r7, #8]
    }
 8000ec8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000eca:	bf00      	nop
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0fc      	beq.n	8000ecc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000010 	.word	0x20000010
	...

08000ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <pxCurrentTCBConst2>)
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	6808      	ldr	r0, [r1, #0]
 8000ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000efa:	f380 8809 	msr	PSP, r0
 8000efe:	f3bf 8f6f 	isb	sy
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	f380 8811 	msr	BASEPRI, r0
 8000f0a:	4770      	bx	lr
 8000f0c:	f3af 8000 	nop.w

08000f10 <pxCurrentTCBConst2>:
 8000f10:	200050a4 	.word	0x200050a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop

08000f18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <prvPortStartFirstTask+0x24>)
 8000f1a:	6800      	ldr	r0, [r0, #0]
 8000f1c:	6800      	ldr	r0, [r0, #0]
 8000f1e:	f380 8808 	msr	MSP, r0
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	f380 8814 	msr	CONTROL, r0
 8000f2a:	b662      	cpsie	i
 8000f2c:	b661      	cpsie	f
 8000f2e:	f3bf 8f4f 	dsb	sy
 8000f32:	f3bf 8f6f 	isb	sy
 8000f36:	df00      	svc	0
 8000f38:	bf00      	nop
 8000f3a:	0000      	.short	0x0000
 8000f3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop

08000f44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <xPortStartScheduler+0x120>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a46      	ldr	r2, [pc, #280]	; (8001068 <xPortStartScheduler+0x124>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d10a      	bne.n	8000f6a <xPortStartScheduler+0x26>
        __asm volatile
 8000f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f58:	f383 8811 	msr	BASEPRI, r3
 8000f5c:	f3bf 8f6f 	isb	sy
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	613b      	str	r3, [r7, #16]
    }
 8000f66:	bf00      	nop
 8000f68:	e7fe      	b.n	8000f68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000f6a:	4b3e      	ldr	r3, [pc, #248]	; (8001064 <xPortStartScheduler+0x120>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a3f      	ldr	r2, [pc, #252]	; (800106c <xPortStartScheduler+0x128>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d10a      	bne.n	8000f8a <xPortStartScheduler+0x46>
        __asm volatile
 8000f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f78:	f383 8811 	msr	BASEPRI, r3
 8000f7c:	f3bf 8f6f 	isb	sy
 8000f80:	f3bf 8f4f 	dsb	sy
 8000f84:	60fb      	str	r3, [r7, #12]
    }
 8000f86:	bf00      	nop
 8000f88:	e7fe      	b.n	8000f88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000f8a:	4b39      	ldr	r3, [pc, #228]	; (8001070 <xPortStartScheduler+0x12c>)
 8000f8c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <xPortStartScheduler+0x130>)
 8000fb0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <xPortStartScheduler+0x134>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fb8:	e009      	b.n	8000fce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <xPortStartScheduler+0x134>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	; (8001078 <xPortStartScheduler+0x134>)
 8000fc2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	2b80      	cmp	r3, #128	; 0x80
 8000fd8:	d0ef      	beq.n	8000fba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <xPortStartScheduler+0x134>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d00a      	beq.n	8000ffc <xPortStartScheduler+0xb8>
        __asm volatile
 8000fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fea:	f383 8811 	msr	BASEPRI, r3
 8000fee:	f3bf 8f6f 	isb	sy
 8000ff2:	f3bf 8f4f 	dsb	sy
 8000ff6:	60bb      	str	r3, [r7, #8]
    }
 8000ff8:	bf00      	nop
 8000ffa:	e7fe      	b.n	8000ffa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <xPortStartScheduler+0x134>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <xPortStartScheduler+0x134>)
 8001004:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <xPortStartScheduler+0x134>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800100e:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <xPortStartScheduler+0x134>)
 8001010:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <xPortStartScheduler+0x138>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <xPortStartScheduler+0x138>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <xPortStartScheduler+0x138>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <xPortStartScheduler+0x138>)
 800102c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001030:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001032:	f000 f8db 	bl	80011ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <xPortStartScheduler+0x13c>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800103c:	f000 f8f0 	bl	8001220 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <xPortStartScheduler+0x140>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <xPortStartScheduler+0x140>)
 8001046:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800104a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800104c:	f7ff ff64 	bl	8000f18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001050:	f001 fa5c 	bl	800250c <vTaskSwitchContext>
    prvTaskExitError();
 8001054:	f7ff ff1a 	bl	8000e8c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	410fc271 	.word	0x410fc271
 800106c:	410fc270 	.word	0x410fc270
 8001070:	e000e400 	.word	0xe000e400
 8001074:	2000509c 	.word	0x2000509c
 8001078:	200050a0 	.word	0x200050a0
 800107c:	e000ed20 	.word	0xe000ed20
 8001080:	20000010 	.word	0x20000010
 8001084:	e000ef34 	.word	0xe000ef34

08001088 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
        __asm volatile
 800108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001092:	f383 8811 	msr	BASEPRI, r3
 8001096:	f3bf 8f6f 	isb	sy
 800109a:	f3bf 8f4f 	dsb	sy
 800109e:	607b      	str	r3, [r7, #4]
    }
 80010a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <vPortEnterCritical+0x58>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <vPortEnterCritical+0x58>)
 80010aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <vPortEnterCritical+0x58>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10f      	bne.n	80010d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <vPortEnterCritical+0x5c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80010be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010c2:	f383 8811 	msr	BASEPRI, r3
 80010c6:	f3bf 8f6f 	isb	sy
 80010ca:	f3bf 8f4f 	dsb	sy
 80010ce:	603b      	str	r3, [r7, #0]
    }
 80010d0:	bf00      	nop
 80010d2:	e7fe      	b.n	80010d2 <vPortEnterCritical+0x4a>
    }
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000010 	.word	0x20000010
 80010e4:	e000ed04 	.word	0xe000ed04

080010e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <vPortExitCritical+0x50>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10a      	bne.n	800110c <vPortExitCritical+0x24>
        __asm volatile
 80010f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fa:	f383 8811 	msr	BASEPRI, r3
 80010fe:	f3bf 8f6f 	isb	sy
 8001102:	f3bf 8f4f 	dsb	sy
 8001106:	607b      	str	r3, [r7, #4]
    }
 8001108:	bf00      	nop
 800110a:	e7fe      	b.n	800110a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <vPortExitCritical+0x50>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3b01      	subs	r3, #1
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <vPortExitCritical+0x50>)
 8001114:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <vPortExitCritical+0x50>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d105      	bne.n	800112a <vPortExitCritical+0x42>
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001128:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000010 	.word	0x20000010
 800113c:	00000000 	.word	0x00000000

08001140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001140:	f3ef 8009 	mrs	r0, PSP
 8001144:	f3bf 8f6f 	isb	sy
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <pxCurrentTCBConst>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	f01e 0f10 	tst.w	lr, #16
 8001150:	bf08      	it	eq
 8001152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800115a:	6010      	str	r0, [r2, #0]
 800115c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001164:	f380 8811 	msr	BASEPRI, r0
 8001168:	f3bf 8f4f 	dsb	sy
 800116c:	f3bf 8f6f 	isb	sy
 8001170:	f001 f9cc 	bl	800250c <vTaskSwitchContext>
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	f380 8811 	msr	BASEPRI, r0
 800117c:	bc09      	pop	{r0, r3}
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	6808      	ldr	r0, [r1, #0]
 8001182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001186:	f01e 0f10 	tst.w	lr, #16
 800118a:	bf08      	it	eq
 800118c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001190:	f380 8809 	msr	PSP, r0
 8001194:	f3bf 8f6f 	isb	sy
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w

080011a0 <pxCurrentTCBConst>:
 80011a0:	200050a4 	.word	0x200050a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop

080011a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
        __asm volatile
 80011ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b2:	f383 8811 	msr	BASEPRI, r3
 80011b6:	f3bf 8f6f 	isb	sy
 80011ba:	f3bf 8f4f 	dsb	sy
 80011be:	607b      	str	r3, [r7, #4]
    }
 80011c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80011c2:	f001 f88d 	bl	80022e0 <xTaskIncrementTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <SysTick_Handler+0x40>)
 80011ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f383 8811 	msr	BASEPRI, r3
    }
 80011de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <vPortSetupTimerInterrupt+0x28>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <vPortSetupTimerInterrupt+0x2c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <vPortSetupTimerInterrupt+0x30>)
 80011fe:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001202:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <vPortSetupTimerInterrupt+0x28>)
 8001206:	2207      	movs	r2, #7
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e010 	.word	0xe000e010
 8001218:	e000e018 	.word	0xe000e018
 800121c:	e000e014 	.word	0xe000e014

08001220 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001220:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001230 <vPortEnableVFP+0x10>
 8001224:	6801      	ldr	r1, [r0, #0]
 8001226:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800122a:	6001      	str	r1, [r0, #0]
 800122c:	4770      	bx	lr
 800122e:	0000      	.short	0x0000
 8001230:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop

08001238 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001242:	2301      	movs	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10a      	bne.n	8001266 <xQueueGenericReset+0x2e>
        __asm volatile
 8001250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001254:	f383 8811 	msr	BASEPRI, r3
 8001258:	f3bf 8f6f 	isb	sy
 800125c:	f3bf 8f4f 	dsb	sy
 8001260:	60fb      	str	r3, [r7, #12]
    }
 8001262:	bf00      	nop
 8001264:	e7fe      	b.n	8001264 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d05d      	beq.n	8001328 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001270:	2b00      	cmp	r3, #0
 8001272:	d059      	beq.n	8001328 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127c:	2100      	movs	r1, #0
 800127e:	fba3 2302 	umull	r2, r3, r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d000      	beq.n	8001288 <xQueueGenericReset+0x50>
 8001286:	2101      	movs	r1, #1
 8001288:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	d14c      	bne.n	8001328 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800128e:	f7ff fefb 	bl	8001088 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129a:	6939      	ldr	r1, [r7, #16]
 800129c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	441a      	add	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2200      	movs	r2, #0
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012be:	3b01      	subs	r3, #1
 80012c0:	6939      	ldr	r1, [r7, #16]
 80012c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	441a      	add	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	22ff      	movs	r2, #255	; 0xff
 80012da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d114      	bne.n	800130e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01a      	beq.n	8001322 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	3310      	adds	r3, #16
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 f9d1 	bl	8002698 <xTaskRemoveFromEventList>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d012      	beq.n	8001322 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <xQueueGenericReset+0x11c>)
 80012fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	f3bf 8f4f 	dsb	sy
 8001308:	f3bf 8f6f 	isb	sy
 800130c:	e009      	b.n	8001322 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3310      	adds	r3, #16
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fc5c 	bl	8000bd0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	3324      	adds	r3, #36	; 0x24
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fc57 	bl	8000bd0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001322:	f7ff fee1 	bl	80010e8 <vPortExitCritical>
 8001326:	e001      	b.n	800132c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10a      	bne.n	8001348 <xQueueGenericReset+0x110>
        __asm volatile
 8001332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001336:	f383 8811 	msr	BASEPRI, r3
 800133a:	f3bf 8f6f 	isb	sy
 800133e:	f3bf 8f4f 	dsb	sy
 8001342:	60bb      	str	r3, [r7, #8]
    }
 8001344:	bf00      	nop
 8001346:	e7fe      	b.n	8001346 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001348:	697b      	ldr	r3, [r7, #20]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000ed04 	.word	0xe000ed04

08001358 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af02      	add	r7, sp, #8
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d02e      	beq.n	80013ce <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001370:	2100      	movs	r1, #0
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	fba3 2302 	umull	r2, r3, r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d000      	beq.n	8001380 <xQueueGenericCreate+0x28>
 800137e:	2101      	movs	r1, #1
 8001380:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001382:	2b00      	cmp	r3, #0
 8001384:	d123      	bne.n	80013ce <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800138e:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8001392:	d81c      	bhi.n	80013ce <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3348      	adds	r3, #72	; 0x48
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fa16 	bl	80007d4 <pvPortMalloc>
 80013a8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d01c      	beq.n	80013ea <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3348      	adds	r3, #72	; 0x48
 80013b8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f814 	bl	80013f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80013cc:	e00d      	b.n	80013ea <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10a      	bne.n	80013ea <xQueueGenericCreate+0x92>
        __asm volatile
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	613b      	str	r3, [r7, #16]
    }
 80013e6:	bf00      	nop
 80013e8:	e7fe      	b.n	80013e8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80013ea:	69fb      	ldr	r3, [r7, #28]
    }
 80013ec:	4618      	mov	r0, r3
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e002      	b.n	8001416 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001422:	2101      	movs	r1, #1
 8001424:	69b8      	ldr	r0, [r7, #24]
 8001426:	f7ff ff07 	bl	8001238 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10a      	bne.n	8001466 <xQueueGenericSend+0x32>
        __asm volatile
 8001450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001454:	f383 8811 	msr	BASEPRI, r3
 8001458:	f3bf 8f6f 	isb	sy
 800145c:	f3bf 8f4f 	dsb	sy
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001462:	bf00      	nop
 8001464:	e7fe      	b.n	8001464 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <xQueueGenericSend+0x40>
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <xQueueGenericSend+0x44>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <xQueueGenericSend+0x46>
 8001478:	2300      	movs	r3, #0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10a      	bne.n	8001494 <xQueueGenericSend+0x60>
        __asm volatile
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001490:	bf00      	nop
 8001492:	e7fe      	b.n	8001492 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d103      	bne.n	80014a2 <xQueueGenericSend+0x6e>
 800149a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <xQueueGenericSend+0x72>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <xQueueGenericSend+0x74>
 80014a6:	2300      	movs	r3, #0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10a      	bne.n	80014c2 <xQueueGenericSend+0x8e>
        __asm volatile
 80014ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b0:	f383 8811 	msr	BASEPRI, r3
 80014b4:	f3bf 8f6f 	isb	sy
 80014b8:	f3bf 8f4f 	dsb	sy
 80014bc:	623b      	str	r3, [r7, #32]
    }
 80014be:	bf00      	nop
 80014c0:	e7fe      	b.n	80014c0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80014c2:	f001 fab1 	bl	8002a28 <xTaskGetSchedulerState>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <xQueueGenericSend+0x9e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <xQueueGenericSend+0xa2>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <xQueueGenericSend+0xa4>
 80014d6:	2300      	movs	r3, #0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10a      	bne.n	80014f2 <xQueueGenericSend+0xbe>
        __asm volatile
 80014dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e0:	f383 8811 	msr	BASEPRI, r3
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	61fb      	str	r3, [r7, #28]
    }
 80014ee:	bf00      	nop
 80014f0:	e7fe      	b.n	80014f0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80014f2:	f7ff fdc9 	bl	8001088 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fe:	429a      	cmp	r2, r3
 8001500:	d302      	bcc.n	8001508 <xQueueGenericSend+0xd4>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d129      	bne.n	800155c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800150e:	f000 fa93 	bl	8001a38 <prvCopyDataToQueue>
 8001512:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	2b00      	cmp	r3, #0
 800151a:	d010      	beq.n	800153e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151e:	3324      	adds	r3, #36	; 0x24
 8001520:	4618      	mov	r0, r3
 8001522:	f001 f8b9 	bl	8002698 <xTaskRemoveFromEventList>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800152c:	4b3f      	ldr	r3, [pc, #252]	; (800162c <xQueueGenericSend+0x1f8>)
 800152e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f3bf 8f4f 	dsb	sy
 8001538:	f3bf 8f6f 	isb	sy
 800153c:	e00a      	b.n	8001554 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <xQueueGenericSend+0x1f8>)
 8001546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f3bf 8f4f 	dsb	sy
 8001550:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001554:	f7ff fdc8 	bl	80010e8 <vPortExitCritical>
                return pdPASS;
 8001558:	2301      	movs	r3, #1
 800155a:	e063      	b.n	8001624 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001562:	f7ff fdc1 	bl	80010e8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001566:	2300      	movs	r3, #0
 8001568:	e05c      	b.n	8001624 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f001 f965 	bl	8002844 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800157a:	2301      	movs	r3, #1
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800157e:	f7ff fdb3 	bl	80010e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001582:	f000 fd93 	bl	80020ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001586:	f7ff fd7f 	bl	8001088 <vPortEnterCritical>
 800158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001596:	d103      	bne.n	80015a0 <xQueueGenericSend+0x16c>
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d103      	bne.n	80015b6 <xQueueGenericSend+0x182>
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015b6:	f7ff fd97 	bl	80010e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80015ba:	1d3a      	adds	r2, r7, #4
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f954 	bl	8002870 <xTaskCheckForTimeOut>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d124      	bne.n	8001618 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80015ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015d0:	f000 fb2a 	bl	8001c28 <prvIsQueueFull>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d018      	beq.n	800160c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	3310      	adds	r3, #16
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 ffee 	bl	80025c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80015e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ea:	f000 fab5 	bl	8001b58 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80015ee:	f000 fd6b 	bl	80020c8 <xTaskResumeAll>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f47f af7c 	bne.w	80014f2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <xQueueGenericSend+0x1f8>)
 80015fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	f3bf 8f6f 	isb	sy
 800160a:	e772      	b.n	80014f2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800160c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800160e:	f000 faa3 	bl	8001b58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001612:	f000 fd59 	bl	80020c8 <xTaskResumeAll>
 8001616:	e76c      	b.n	80014f2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800161a:	f000 fa9d 	bl	8001b58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800161e:	f000 fd53 	bl	80020c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001622:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001624:	4618      	mov	r0, r3
 8001626:	3738      	adds	r7, #56	; 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	e000ed04 	.word	0xe000ed04

08001630 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10a      	bne.n	8001660 <xQueueReceive+0x30>
        __asm volatile
 800164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800164e:	f383 8811 	msr	BASEPRI, r3
 8001652:	f3bf 8f6f 	isb	sy
 8001656:	f3bf 8f4f 	dsb	sy
 800165a:	623b      	str	r3, [r7, #32]
    }
 800165c:	bf00      	nop
 800165e:	e7fe      	b.n	800165e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <xQueueReceive+0x3e>
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <xQueueReceive+0x42>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <xQueueReceive+0x44>
 8001672:	2300      	movs	r3, #0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10a      	bne.n	800168e <xQueueReceive+0x5e>
        __asm volatile
 8001678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167c:	f383 8811 	msr	BASEPRI, r3
 8001680:	f3bf 8f6f 	isb	sy
 8001684:	f3bf 8f4f 	dsb	sy
 8001688:	61fb      	str	r3, [r7, #28]
    }
 800168a:	bf00      	nop
 800168c:	e7fe      	b.n	800168c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800168e:	f001 f9cb 	bl	8002a28 <xTaskGetSchedulerState>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <xQueueReceive+0x6e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <xQueueReceive+0x72>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <xQueueReceive+0x74>
 80016a2:	2300      	movs	r3, #0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10a      	bne.n	80016be <xQueueReceive+0x8e>
        __asm volatile
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	61bb      	str	r3, [r7, #24]
    }
 80016ba:	bf00      	nop
 80016bc:	e7fe      	b.n	80016bc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80016be:	f7ff fce3 	bl	8001088 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01f      	beq.n	800170e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016d2:	f000 fa1b 	bl	8001b0c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	1e5a      	subs	r2, r3, #1
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00f      	beq.n	8001706 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	3310      	adds	r3, #16
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 ffd4 	bl	8002698 <xTaskRemoveFromEventList>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <xQueueReceive+0x1bc>)
 80016f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	f3bf 8f4f 	dsb	sy
 8001702:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001706:	f7ff fcef 	bl	80010e8 <vPortExitCritical>
                return pdPASS;
 800170a:	2301      	movs	r3, #1
 800170c:	e069      	b.n	80017e2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001714:	f7ff fce8 	bl	80010e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001718:	2300      	movs	r3, #0
 800171a:	e062      	b.n	80017e2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4618      	mov	r0, r3
 8001728:	f001 f88c 	bl	8002844 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800172c:	2301      	movs	r3, #1
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001730:	f7ff fcda 	bl	80010e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001734:	f000 fcba 	bl	80020ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001738:	f7ff fca6 	bl	8001088 <vPortEnterCritical>
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d103      	bne.n	8001752 <xQueueReceive+0x122>
 800174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001758:	b25b      	sxtb	r3, r3
 800175a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175e:	d103      	bne.n	8001768 <xQueueReceive+0x138>
 8001760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001768:	f7ff fcbe 	bl	80010e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800176c:	1d3a      	adds	r2, r7, #4
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f001 f87b 	bl	8002870 <xTaskCheckForTimeOut>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d123      	bne.n	80017c8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001782:	f000 fa3b 	bl	8001bfc <prvIsQueueEmpty>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d017      	beq.n	80017bc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	3324      	adds	r3, #36	; 0x24
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f000 ff15 	bl	80025c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800179a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800179c:	f000 f9dc 	bl	8001b58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80017a0:	f000 fc92 	bl	80020c8 <xTaskResumeAll>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d189      	bne.n	80016be <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <xQueueReceive+0x1bc>)
 80017ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f3bf 8f4f 	dsb	sy
 80017b6:	f3bf 8f6f 	isb	sy
 80017ba:	e780      	b.n	80016be <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80017bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017be:	f000 f9cb 	bl	8001b58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017c2:	f000 fc81 	bl	80020c8 <xTaskResumeAll>
 80017c6:	e77a      	b.n	80016be <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80017c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017ca:	f000 f9c5 	bl	8001b58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017ce:	f000 fc7b 	bl	80020c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017d4:	f000 fa12 	bl	8001bfc <prvIsQueueEmpty>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f43f af6f 	beq.w	80016be <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80017e0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3730      	adds	r7, #48	; 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000ed04 	.word	0xe000ed04

080017f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800180c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	623b      	str	r3, [r7, #32]
    }
 800181e:	bf00      	nop
 8001820:	e7fe      	b.n	8001820 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00a      	beq.n	8001840 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	61fb      	str	r3, [r7, #28]
    }
 800183c:	bf00      	nop
 800183e:	e7fe      	b.n	800183e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001840:	f001 f8f2 	bl	8002a28 <xTaskGetSchedulerState>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <xQueueSemaphoreTake+0x60>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <xQueueSemaphoreTake+0x64>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <xQueueSemaphoreTake+0x66>
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10a      	bne.n	8001870 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	61bb      	str	r3, [r7, #24]
    }
 800186c:	bf00      	nop
 800186e:	e7fe      	b.n	800186e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001870:	f7ff fc0a 	bl	8001088 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d024      	beq.n	80018ca <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001890:	f001 fae2 	bl	8002e58 <pvTaskIncrementMutexHeldCount>
 8001894:	4602      	mov	r2, r0
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00f      	beq.n	80018c2 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a4:	3310      	adds	r3, #16
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fef6 	bl	8002698 <xTaskRemoveFromEventList>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <xQueueSemaphoreTake+0x214>)
 80018b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f3bf 8f4f 	dsb	sy
 80018be:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80018c2:	f7ff fc11 	bl	80010e8 <vPortExitCritical>
                return pdPASS;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e097      	b.n	80019fa <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d111      	bne.n	80018f4 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <xQueueSemaphoreTake+0xfc>
        __asm volatile
 80018d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018da:	f383 8811 	msr	BASEPRI, r3
 80018de:	f3bf 8f6f 	isb	sy
 80018e2:	f3bf 8f4f 	dsb	sy
 80018e6:	617b      	str	r3, [r7, #20]
    }
 80018e8:	bf00      	nop
 80018ea:	e7fe      	b.n	80018ea <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80018ec:	f7ff fbfc 	bl	80010e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e082      	b.n	80019fa <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 ffa0 	bl	8002844 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001904:	2301      	movs	r3, #1
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001908:	f7ff fbee 	bl	80010e8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800190c:	f000 fbce 	bl	80020ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001910:	f7ff fbba 	bl	8001088 <vPortEnterCritical>
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800191a:	b25b      	sxtb	r3, r3
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d103      	bne.n	800192a <xQueueSemaphoreTake+0x13a>
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001930:	b25b      	sxtb	r3, r3
 8001932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001936:	d103      	bne.n	8001940 <xQueueSemaphoreTake+0x150>
 8001938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001940:	f7ff fbd2 	bl	80010e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001944:	463a      	mov	r2, r7
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f000 ff8f 	bl	8002870 <xTaskCheckForTimeOut>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d132      	bne.n	80019be <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800195a:	f000 f94f 	bl	8001bfc <prvIsQueueEmpty>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d026      	beq.n	80019b2 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 800196c:	f7ff fb8c 	bl	8001088 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4618      	mov	r0, r3
 8001976:	f001 f875 	bl	8002a64 <xTaskPriorityInherit>
 800197a:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800197c:	f7ff fbb4 	bl	80010e8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001982:	3324      	adds	r3, #36	; 0x24
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fe1b 	bl	80025c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800198e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001990:	f000 f8e2 	bl	8001b58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001994:	f000 fb98 	bl	80020c8 <xTaskResumeAll>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f af68 	bne.w	8001870 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <xQueueSemaphoreTake+0x214>)
 80019a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f3bf 8f4f 	dsb	sy
 80019ac:	f3bf 8f6f 	isb	sy
 80019b0:	e75e      	b.n	8001870 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80019b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019b4:	f000 f8d0 	bl	8001b58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80019b8:	f000 fb86 	bl	80020c8 <xTaskResumeAll>
 80019bc:	e758      	b.n	8001870 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80019be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019c0:	f000 f8ca 	bl	8001b58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80019c4:	f000 fb80 	bl	80020c8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ca:	f000 f917 	bl	8001bfc <prvIsQueueEmpty>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f43f af4d 	beq.w	8001870 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00d      	beq.n	80019f8 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 80019dc:	f7ff fb54 	bl	8001088 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80019e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019e2:	f000 f811 	bl	8001a08 <prvGetDisinheritPriorityAfterTimeout>
 80019e6:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 f97a 	bl	8002ce8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80019f4:	f7ff fb78 	bl	80010e8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80019f8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000ed04 	.word	0xe000ed04

08001a08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1c3 0305 	rsb	r3, r3, #5
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e001      	b.n	8001a2a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    }
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10d      	bne.n	8001a72 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d14d      	bne.n	8001afa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 f89c 	bl	8002ba0 <xTaskPriorityDisinherit>
 8001a68:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	e043      	b.n	8001afa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d119      	bne.n	8001aac <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6858      	ldr	r0, [r3, #4]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	461a      	mov	r2, r3
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	f001 fd16 	bl	80034b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	441a      	add	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d32b      	bcc.n	8001afa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	e026      	b.n	8001afa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	68d8      	ldr	r0, [r3, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	f001 fcfc 	bl	80034b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	441a      	add	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	441a      	add	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d105      	bne.n	8001afa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001b02:	697b      	ldr	r3, [r7, #20]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d018      	beq.n	8001b50 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	441a      	add	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d303      	bcc.n	8001b40 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68d9      	ldr	r1, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6838      	ldr	r0, [r7, #0]
 8001b4c:	f001 fcb2 	bl	80034b4 <memcpy>
    }
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001b60:	f7ff fa92 	bl	8001088 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b6a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b6c:	e011      	b.n	8001b92 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3324      	adds	r3, #36	; 0x24
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fd8c 	bl	8002698 <xTaskRemoveFromEventList>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001b86:	f000 fed1 	bl	800292c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	dce9      	bgt.n	8001b6e <prvUnlockQueue+0x16>
 8001b9a:	e000      	b.n	8001b9e <prvUnlockQueue+0x46>
                        break;
 8001b9c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	22ff      	movs	r2, #255	; 0xff
 8001ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001ba6:	f7ff fa9f 	bl	80010e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001baa:	f7ff fa6d 	bl	8001088 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bb4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bb6:	e011      	b.n	8001bdc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3310      	adds	r3, #16
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fd67 	bl	8002698 <xTaskRemoveFromEventList>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001bd0:	f000 feac 	bl	800292c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	dce9      	bgt.n	8001bb8 <prvUnlockQueue+0x60>
 8001be4:	e000      	b.n	8001be8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001be6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	22ff      	movs	r2, #255	; 0xff
 8001bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001bf0:	f7ff fa7a 	bl	80010e8 <vPortExitCritical>
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c04:	f7ff fa40 	bl	8001088 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e001      	b.n	8001c1a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c1a:	f7ff fa65 	bl	80010e8 <vPortExitCritical>

    return xReturn;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c30:	f7ff fa2a 	bl	8001088 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d102      	bne.n	8001c46 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e001      	b.n	8001c4a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c4a:	f7ff fa4d 	bl	80010e8 <vPortExitCritical>

    return xReturn;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001c68:	f7ff fa0e 	bl	8001088 <vPortEnterCritical>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d103      	bne.n	8001c82 <vQueueWaitForMessageRestricted+0x2a>
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d103      	bne.n	8001c98 <vQueueWaitForMessageRestricted+0x40>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c98:	f7ff fa26 	bl	80010e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d106      	bne.n	8001cb2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3324      	adds	r3, #36	; 0x24
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 fcad 	bl	800260c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff50 	bl	8001b58 <prvUnlockQueue>
    }
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fd7d 	bl	80007d4 <pvPortMalloc>
 8001cda:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ce2:	2050      	movs	r0, #80	; 0x50
 8001ce4:	f7fe fd76 	bl	80007d4 <pvPortMalloc>
 8001ce8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf6:	e005      	b.n	8001d04 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8001cf8:	6978      	ldr	r0, [r7, #20]
 8001cfa:	f7fe fe4b 	bl	8000994 <vPortFree>
 8001cfe:	e001      	b.n	8001d04 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d013      	beq.n	8001d32 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9303      	str	r3, [sp, #12]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f80e 	bl	8001d42 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001d26:	69f8      	ldr	r0, [r7, #28]
 8001d28:	f000 f8a8 	bl	8001e7c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	e002      	b.n	8001d38 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001d38:	69bb      	ldr	r3, [r7, #24]
    }
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b088      	sub	sp, #32
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f023 0307 	bic.w	r3, r3, #7
 8001d68:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <prvInitialiseNewTask+0x48>
        __asm volatile
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	617b      	str	r3, [r7, #20]
    }
 8001d86:	bf00      	nop
 8001d88:	e7fe      	b.n	8001d88 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01f      	beq.n	8001dd0 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e012      	b.n	8001dbc <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	7819      	ldrb	r1, [r3, #0]
 8001d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4413      	add	r3, r2
 8001da4:	3334      	adds	r3, #52	; 0x34
 8001da6:	460a      	mov	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d9e9      	bls.n	8001d96 <prvInitialiseNewTask+0x54>
 8001dc2:	e000      	b.n	8001dc6 <prvInitialiseNewTask+0x84>
            {
                break;
 8001dc4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001dce:	e003      	b.n	8001dd8 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d90a      	bls.n	8001df4 <prvInitialiseNewTask+0xb2>
        __asm volatile
 8001dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de2:	f383 8811 	msr	BASEPRI, r3
 8001de6:	f3bf 8f6f 	isb	sy
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	613b      	str	r3, [r7, #16]
    }
 8001df0:	bf00      	nop
 8001df2:	e7fe      	b.n	8001df2 <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d901      	bls.n	8001dfe <prvInitialiseNewTask+0xbc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->uxMutexesHeld = 0;
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	3304      	adds	r3, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fefb 	bl	8000c10 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fef6 	bl	8000c10 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e28:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	f1c3 0205 	rsb	r2, r3, #5
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	3348      	adds	r3, #72	; 0x48
 8001e3e:	2204      	movs	r2, #4
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 fb44 	bl	80034d0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4a:	334c      	adds	r3, #76	; 0x4c
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fb3d 	bl	80034d0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	69b8      	ldr	r0, [r7, #24]
 8001e5c:	f7fe ffe2 	bl	8000e24 <pxPortInitialiseStack>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <prvInitialiseNewTask+0x130>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001e84:	f7ff f900 	bl	8001088 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001e88:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <prvAddNewTaskToReadyList+0x108>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a3d      	ldr	r2, [pc, #244]	; (8001f84 <prvAddNewTaskToReadyList+0x108>)
 8001e90:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <prvAddNewTaskToReadyList+0x10c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <prvAddNewTaskToReadyList+0x10c>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ea0:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <prvAddNewTaskToReadyList+0x108>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d110      	bne.n	8001eca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001ea8:	f000 fd64 	bl	8002974 <prvInitialiseTaskLists>
 8001eac:	e00d      	b.n	8001eca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <prvAddNewTaskToReadyList+0x110>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <prvAddNewTaskToReadyList+0x10c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d802      	bhi.n	8001eca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001ec4:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <prvAddNewTaskToReadyList+0x10c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <prvAddNewTaskToReadyList+0x114>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <prvAddNewTaskToReadyList+0x114>)
 8001ed2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <prvAddNewTaskToReadyList+0x118>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <prvAddNewTaskToReadyList+0x118>)
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	492b      	ldr	r1, [pc, #172]	; (8001f98 <prvAddNewTaskToReadyList+0x11c>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	3204      	adds	r2, #4
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1d1a      	adds	r2, r3, #4
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <prvAddNewTaskToReadyList+0x11c>)
 8001f2a:	441a      	add	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	4918      	ldr	r1, [pc, #96]	; (8001f98 <prvAddNewTaskToReadyList+0x11c>)
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	4814      	ldr	r0, [pc, #80]	; (8001f98 <prvAddNewTaskToReadyList+0x11c>)
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4403      	add	r3, r0
 8001f50:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001f52:	f7ff f8c9 	bl	80010e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <prvAddNewTaskToReadyList+0x110>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00e      	beq.n	8001f7c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <prvAddNewTaskToReadyList+0x10c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <prvAddNewTaskToReadyList+0x120>)
 8001f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20005150 	.word	0x20005150
 8001f88:	200050a4 	.word	0x200050a4
 8001f8c:	2000515c 	.word	0x2000515c
 8001f90:	2000516c 	.word	0x2000516c
 8001f94:	20005158 	.word	0x20005158
 8001f98:	200050a8 	.word	0x200050a8
 8001f9c:	e000ed04 	.word	0xe000ed04

08001fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d017      	beq.n	8001fe2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <vTaskDelay+0x60>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <vTaskDelay+0x30>
        __asm volatile
 8001fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	60bb      	str	r3, [r7, #8]
    }
 8001fcc:	bf00      	nop
 8001fce:	e7fe      	b.n	8001fce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001fd0:	f000 f86c 	bl	80020ac <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 ff52 	bl	8002e80 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001fdc:	f000 f874 	bl	80020c8 <xTaskResumeAll>
 8001fe0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <vTaskDelay+0x64>)
 8001fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20005178 	.word	0x20005178
 8002004:	e000ed04 	.word	0xe000ed04

08002008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <vTaskStartScheduler+0x88>)
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2300      	movs	r3, #0
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	491e      	ldr	r1, [pc, #120]	; (8002094 <vTaskStartScheduler+0x8c>)
 800201c:	481e      	ldr	r0, [pc, #120]	; (8002098 <vTaskStartScheduler+0x90>)
 800201e:	f7ff fe4f 	bl	8001cc0 <xTaskCreate>
 8002022:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800202a:	f000 ff7d 	bl	8002f28 <xTimerCreateTimerTask>
 800202e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d116      	bne.n	8002064 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	60bb      	str	r3, [r7, #8]
    }
 8002048:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <vTaskStartScheduler+0x94>)
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <vTaskStartScheduler+0x98>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <vTaskStartScheduler+0x9c>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800205e:	f7fe ff71 	bl	8000f44 <xPortStartScheduler>
 8002062:	e00e      	b.n	8002082 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206a:	d10a      	bne.n	8002082 <vTaskStartScheduler+0x7a>
        __asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	607b      	str	r3, [r7, #4]
    }
 800207e:	bf00      	nop
 8002080:	e7fe      	b.n	8002080 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <vTaskStartScheduler+0xa0>)
 8002084:	681b      	ldr	r3, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20005174 	.word	0x20005174
 8002094:	080034f8 	.word	0x080034f8
 8002098:	08002945 	.word	0x08002945
 800209c:	20005170 	.word	0x20005170
 80020a0:	2000515c 	.word	0x2000515c
 80020a4:	20005154 	.word	0x20005154
 80020a8:	20000014 	.word	0x20000014

080020ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <vTaskSuspendAll+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <vTaskSuspendAll+0x18>)
 80020b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	20005178 	.word	0x20005178

080020c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80020d6:	4b71      	ldr	r3, [pc, #452]	; (800229c <xTaskResumeAll+0x1d4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	607b      	str	r3, [r7, #4]
    }
 80020f0:	bf00      	nop
 80020f2:	e7fe      	b.n	80020f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80020f4:	f7fe ffc8 	bl	8001088 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <xTaskResumeAll+0x1d4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4a67      	ldr	r2, [pc, #412]	; (800229c <xTaskResumeAll+0x1d4>)
 8002100:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002102:	4b66      	ldr	r3, [pc, #408]	; (800229c <xTaskResumeAll+0x1d4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80c0 	bne.w	800228c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800210c:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <xTaskResumeAll+0x1d8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80bb 	beq.w	800228c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002116:	e08a      	b.n	800222e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002118:	4b62      	ldr	r3, [pc, #392]	; (80022a4 <xTaskResumeAll+0x1dc>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	6a12      	ldr	r2, [r2, #32]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	69d2      	ldr	r2, [r2, #28]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3318      	adds	r3, #24
 8002142:	429a      	cmp	r2, r3
 8002144:	d103      	bne.n	800214e <xTaskResumeAll+0x86>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1e5a      	subs	r2, r3, #1
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	68d2      	ldr	r2, [r2, #12]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	6892      	ldr	r2, [r2, #8]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	3304      	adds	r3, #4
 8002180:	429a      	cmp	r2, r3
 8002182:	d103      	bne.n	800218c <xTaskResumeAll+0xc4>
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2200      	movs	r2, #0
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	2201      	movs	r2, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <xTaskResumeAll+0x1e0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <xTaskResumeAll+0x1e0>)
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b2:	493e      	ldr	r1, [pc, #248]	; (80022ac <xTaskResumeAll+0x1e4>)
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3304      	adds	r3, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	3204      	adds	r2, #4
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	1d1a      	adds	r2, r3, #4
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4a2e      	ldr	r2, [pc, #184]	; (80022ac <xTaskResumeAll+0x1e4>)
 80021f2:	441a      	add	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	492b      	ldr	r1, [pc, #172]	; (80022ac <xTaskResumeAll+0x1e4>)
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	4827      	ldr	r0, [pc, #156]	; (80022ac <xTaskResumeAll+0x1e4>)
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4403      	add	r3, r0
 8002218:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <xTaskResumeAll+0x1e8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <xTaskResumeAll+0x1ec>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <xTaskResumeAll+0x1dc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f af70 	bne.w	8002118 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800223e:	f000 fbd7 	bl	80029f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <xTaskResumeAll+0x1f0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800224e:	f000 f847 	bl	80022e0 <xTaskIncrementTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <xTaskResumeAll+0x1ec>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3b01      	subs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f1      	bne.n	800224e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <xTaskResumeAll+0x1f0>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <xTaskResumeAll+0x1ec>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002278:	2301      	movs	r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <xTaskResumeAll+0x1f4>)
 800227e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800228c:	f7fe ff2c 	bl	80010e8 <vPortExitCritical>

    return xAlreadyYielded;
 8002290:	69bb      	ldr	r3, [r7, #24]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20005178 	.word	0x20005178
 80022a0:	20005150 	.word	0x20005150
 80022a4:	2000513c 	.word	0x2000513c
 80022a8:	20005158 	.word	0x20005158
 80022ac:	200050a8 	.word	0x200050a8
 80022b0:	200050a4 	.word	0x200050a4
 80022b4:	20005164 	.word	0x20005164
 80022b8:	20005160 	.word	0x20005160
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <xTaskGetTickCount+0x1c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20005154 	.word	0x20005154

080022e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ea:	4b7d      	ldr	r3, [pc, #500]	; (80024e0 <xTaskIncrementTick+0x200>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80ec 	bne.w	80024cc <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022f4:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <xTaskIncrementTick+0x204>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80022fc:	4a79      	ldr	r2, [pc, #484]	; (80024e4 <xTaskIncrementTick+0x204>)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d120      	bne.n	800234a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002308:	4b77      	ldr	r3, [pc, #476]	; (80024e8 <xTaskIncrementTick+0x208>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <xTaskIncrementTick+0x48>
        __asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	607b      	str	r3, [r7, #4]
    }
 8002324:	bf00      	nop
 8002326:	e7fe      	b.n	8002326 <xTaskIncrementTick+0x46>
 8002328:	4b6f      	ldr	r3, [pc, #444]	; (80024e8 <xTaskIncrementTick+0x208>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <xTaskIncrementTick+0x20c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6d      	ldr	r2, [pc, #436]	; (80024e8 <xTaskIncrementTick+0x208>)
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4a6d      	ldr	r2, [pc, #436]	; (80024ec <xTaskIncrementTick+0x20c>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <xTaskIncrementTick+0x210>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	4a6b      	ldr	r2, [pc, #428]	; (80024f0 <xTaskIncrementTick+0x210>)
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	f000 fb53 	bl	80029f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800234a:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <xTaskIncrementTick+0x214>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a3a      	ldr	r2, [r7, #32]
 8002350:	429a      	cmp	r2, r3
 8002352:	f0c0 80a6 	bcc.w	80024a2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002356:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <xTaskIncrementTick+0x208>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002360:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <xTaskIncrementTick+0x214>)
 8002362:	f04f 32ff 	mov.w	r2, #4294967295
 8002366:	601a      	str	r2, [r3, #0]
                    break;
 8002368:	e09b      	b.n	80024a2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <xTaskIncrementTick+0x208>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800237a:	6a3a      	ldr	r2, [r7, #32]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	429a      	cmp	r2, r3
 8002380:	d203      	bcs.n	800238a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002382:	4a5c      	ldr	r2, [pc, #368]	; (80024f4 <xTaskIncrementTick+0x214>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002388:	e08b      	b.n	80024a2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	68d2      	ldr	r2, [r2, #12]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	6892      	ldr	r2, [r2, #8]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	3304      	adds	r3, #4
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d103      	bne.n	80023b8 <xTaskIncrementTick+0xd8>
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1e5a      	subs	r2, r3, #1
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01e      	beq.n	800240e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	6a12      	ldr	r2, [r2, #32]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	69d2      	ldr	r2, [r2, #28]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3318      	adds	r3, #24
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d103      	bne.n	80023fe <xTaskIncrementTick+0x11e>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	2201      	movs	r2, #1
 8002414:	409a      	lsls	r2, r3
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <xTaskIncrementTick+0x218>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <xTaskIncrementTick+0x218>)
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <xTaskIncrementTick+0x21c>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	3204      	adds	r2, #4
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1d1a      	adds	r2, r3, #4
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4a26      	ldr	r2, [pc, #152]	; (80024fc <xTaskIncrementTick+0x21c>)
 8002464:	441a      	add	r2, r3
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	615a      	str	r2, [r3, #20]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246e:	4923      	ldr	r1, [pc, #140]	; (80024fc <xTaskIncrementTick+0x21c>)
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1c59      	adds	r1, r3, #1
 800247e:	481f      	ldr	r0, [pc, #124]	; (80024fc <xTaskIncrementTick+0x21c>)
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4403      	add	r3, r0
 800248a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <xTaskIncrementTick+0x220>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	429a      	cmp	r2, r3
 8002498:	f4ff af5d 	bcc.w	8002356 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024a0:	e759      	b.n	8002356 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <xTaskIncrementTick+0x220>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a8:	4914      	ldr	r1, [pc, #80]	; (80024fc <xTaskIncrementTick+0x21c>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d901      	bls.n	80024be <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <xTaskIncrementTick+0x224>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	e004      	b.n	80024d6 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <xTaskIncrementTick+0x228>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <xTaskIncrementTick+0x228>)
 80024d4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20005178 	.word	0x20005178
 80024e4:	20005154 	.word	0x20005154
 80024e8:	20005134 	.word	0x20005134
 80024ec:	20005138 	.word	0x20005138
 80024f0:	20005168 	.word	0x20005168
 80024f4:	20005170 	.word	0x20005170
 80024f8:	20005158 	.word	0x20005158
 80024fc:	200050a8 	.word	0x200050a8
 8002500:	200050a4 	.word	0x200050a4
 8002504:	20005164 	.word	0x20005164
 8002508:	20005160 	.word	0x20005160

0800250c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <vTaskSwitchContext+0xa4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <vTaskSwitchContext+0xa8>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002520:	e03f      	b.n	80025a2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <vTaskSwitchContext+0xa8>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <vTaskSwitchContext+0xac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	f1c3 031f 	rsb	r3, r3, #31
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	491f      	ldr	r1, [pc, #124]	; (80025bc <vTaskSwitchContext+0xb0>)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	607b      	str	r3, [r7, #4]
    }
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <vTaskSwitchContext+0x5a>
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <vTaskSwitchContext+0xb0>)
 8002574:	4413      	add	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	3308      	adds	r3, #8
 800258a:	429a      	cmp	r2, r3
 800258c:	d104      	bne.n	8002598 <vTaskSwitchContext+0x8c>
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <vTaskSwitchContext+0xb4>)
 80025a0:	6013      	str	r3, [r2, #0]
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20005178 	.word	0x20005178
 80025b4:	20005164 	.word	0x20005164
 80025b8:	20005158 	.word	0x20005158
 80025bc:	200050a8 	.word	0x200050a8
 80025c0:	200050a4 	.word	0x200050a4

080025c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	60fb      	str	r3, [r7, #12]
    }
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <vTaskPlaceOnEventList+0x44>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3318      	adds	r3, #24
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fb19 	bl	8000c2a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80025f8:	2101      	movs	r1, #1
 80025fa:	6838      	ldr	r0, [r7, #0]
 80025fc:	f000 fc40 	bl	8002e80 <prvAddCurrentTaskToDelayedList>
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200050a4 	.word	0x200050a4

0800260c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	613b      	str	r3, [r7, #16]
    }
 8002630:	bf00      	nop
 8002632:	e7fe      	b.n	8002632 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <vTaskPlaceOnEventListRestricted+0x88>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	61da      	str	r2, [r3, #28]
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <vTaskPlaceOnEventListRestricted+0x88>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	6892      	ldr	r2, [r2, #8]
 800264a:	621a      	str	r2, [r3, #32]
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <vTaskPlaceOnEventListRestricted+0x88>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	3218      	adds	r2, #24
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <vTaskPlaceOnEventListRestricted+0x88>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f103 0218 	add.w	r2, r3, #24
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <vTaskPlaceOnEventListRestricted+0x88>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
 8002680:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	68b8      	ldr	r0, [r7, #8]
 8002686:	f000 fbfb 	bl	8002e80 <prvAddCurrentTaskToDelayedList>
    }
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200050a4 	.word	0x200050a4

08002698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002698:	b480      	push	{r7}
 800269a:	b08b      	sub	sp, #44	; 0x2c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	60fb      	str	r3, [r7, #12]
    }
 80026c0:	bf00      	nop
 80026c2:	e7fe      	b.n	80026c2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	6a3a      	ldr	r2, [r7, #32]
 80026d0:	6a12      	ldr	r2, [r2, #32]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	69d2      	ldr	r2, [r2, #28]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	3318      	adds	r3, #24
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d103      	bne.n	80026f2 <xTaskRemoveFromEventList+0x5a>
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2200      	movs	r2, #0
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002702:	4b4a      	ldr	r3, [pc, #296]	; (800282c <xTaskRemoveFromEventList+0x194>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d15e      	bne.n	80027c8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	68d2      	ldr	r2, [r2, #12]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	6a3a      	ldr	r2, [r7, #32]
 8002720:	6892      	ldr	r2, [r2, #8]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	3304      	adds	r3, #4
 800272c:	429a      	cmp	r2, r3
 800272e:	d103      	bne.n	8002738 <xTaskRemoveFromEventList+0xa0>
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	2200      	movs	r2, #0
 800273c:	615a      	str	r2, [r3, #20]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	1e5a      	subs	r2, r3, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2201      	movs	r2, #1
 800274e:	409a      	lsls	r2, r3
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <xTaskRemoveFromEventList+0x198>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	4a36      	ldr	r2, [pc, #216]	; (8002830 <xTaskRemoveFromEventList+0x198>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	4935      	ldr	r1, [pc, #212]	; (8002834 <xTaskRemoveFromEventList+0x19c>)
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3304      	adds	r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	3204      	adds	r2, #4
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4a25      	ldr	r2, [pc, #148]	; (8002834 <xTaskRemoveFromEventList+0x19c>)
 800279e:	441a      	add	r2, r3
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	615a      	str	r2, [r3, #20]
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a8:	4922      	ldr	r1, [pc, #136]	; (8002834 <xTaskRemoveFromEventList+0x19c>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1c59      	adds	r1, r3, #1
 80027b8:	481e      	ldr	r0, [pc, #120]	; (8002834 <xTaskRemoveFromEventList+0x19c>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4403      	add	r3, r0
 80027c4:	6019      	str	r1, [r3, #0]
 80027c6:	e01b      	b.n	8002800 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <xTaskRemoveFromEventList+0x1a0>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	61da      	str	r2, [r3, #28]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	621a      	str	r2, [r3, #32]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	6a3a      	ldr	r2, [r7, #32]
 80027e2:	3218      	adds	r2, #24
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f103 0218 	add.w	r2, r3, #24
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	4a11      	ldr	r2, [pc, #68]	; (8002838 <xTaskRemoveFromEventList+0x1a0>)
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <xTaskRemoveFromEventList+0x1a0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <xTaskRemoveFromEventList+0x1a0>)
 80027fe:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <xTaskRemoveFromEventList+0x1a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	429a      	cmp	r2, r3
 800280c:	d905      	bls.n	800281a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800280e:	2301      	movs	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <xTaskRemoveFromEventList+0x1a8>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e001      	b.n	800281e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002820:	4618      	mov	r0, r3
 8002822:	372c      	adds	r7, #44	; 0x2c
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	20005178 	.word	0x20005178
 8002830:	20005158 	.word	0x20005158
 8002834:	200050a8 	.word	0x200050a8
 8002838:	2000513c 	.word	0x2000513c
 800283c:	200050a4 	.word	0x200050a4
 8002840:	20005164 	.word	0x20005164

08002844 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <vTaskInternalSetTimeOutState+0x24>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <vTaskInternalSetTimeOutState+0x28>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	605a      	str	r2, [r3, #4]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	20005168 	.word	0x20005168
 800286c:	20005154 	.word	0x20005154

08002870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	613b      	str	r3, [r7, #16]
    }
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	60fb      	str	r3, [r7, #12]
    }
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80028b2:	f7fe fbe9 	bl	8001088 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <xTaskCheckForTimeOut+0xb4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <xTaskCheckForTimeOut+0xb8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d00a      	beq.n	80028e8 <xTaskCheckForTimeOut+0x78>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d305      	bcc.n	80028e8 <xTaskCheckForTimeOut+0x78>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80028dc:	2301      	movs	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e015      	b.n	8002914 <xTaskCheckForTimeOut+0xa4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d20b      	bcs.n	800290a <xTaskCheckForTimeOut+0x9a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	1ad2      	subs	r2, r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa0 	bl	8002844 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	e004      	b.n	8002914 <xTaskCheckForTimeOut+0xa4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002914:	f7fe fbe8 	bl	80010e8 <vPortExitCritical>

    return xReturn;
 8002918:	69fb      	ldr	r3, [r7, #28]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20005154 	.word	0x20005154
 8002928:	20005168 	.word	0x20005168

0800292c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <vTaskMissedYield+0x14>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	20005164 	.word	0x20005164

08002944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800294c:	f000 f848 	bl	80029e0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <prvIdleTask+0x28>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d9f9      	bls.n	800294c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <prvIdleTask+0x2c>)
 800295a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002968:	e7f0      	b.n	800294c <prvIdleTask+0x8>
 800296a:	bf00      	nop
 800296c:	200050a8 	.word	0x200050a8
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	e00c      	b.n	800299a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <prvInitialiseTaskLists+0x54>)
 800298c:	4413      	add	r3, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f91e 	bl	8000bd0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3301      	adds	r3, #1
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d9ef      	bls.n	8002980 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029a0:	480a      	ldr	r0, [pc, #40]	; (80029cc <prvInitialiseTaskLists+0x58>)
 80029a2:	f7fe f915 	bl	8000bd0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029a6:	480a      	ldr	r0, [pc, #40]	; (80029d0 <prvInitialiseTaskLists+0x5c>)
 80029a8:	f7fe f912 	bl	8000bd0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029ac:	4809      	ldr	r0, [pc, #36]	; (80029d4 <prvInitialiseTaskLists+0x60>)
 80029ae:	f7fe f90f 	bl	8000bd0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <prvInitialiseTaskLists+0x64>)
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <prvInitialiseTaskLists+0x58>)
 80029b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <prvInitialiseTaskLists+0x68>)
 80029ba:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <prvInitialiseTaskLists+0x5c>)
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200050a8 	.word	0x200050a8
 80029cc:	2000510c 	.word	0x2000510c
 80029d0:	20005120 	.word	0x20005120
 80029d4:	2000513c 	.word	0x2000513c
 80029d8:	20005134 	.word	0x20005134
 80029dc:	20005138 	.word	0x20005138

080029e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <prvResetNextTaskUnblockTime+0x30>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d104      	bne.n	8002a08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <prvResetNextTaskUnblockTime+0x34>)
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a06:	e005      	b.n	8002a14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <prvResetNextTaskUnblockTime+0x30>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <prvResetNextTaskUnblockTime+0x34>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20005134 	.word	0x20005134
 8002a24:	20005170 	.word	0x20005170

08002a28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <xTaskGetSchedulerState+0x34>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002a36:	2301      	movs	r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	e008      	b.n	8002a4e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <xTaskGetSchedulerState+0x38>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002a44:	2302      	movs	r3, #2
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	e001      	b.n	8002a4e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002a4e:	687b      	ldr	r3, [r7, #4]
    }
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	2000515c 	.word	0x2000515c
 8002a60:	20005178 	.word	0x20005178

08002a64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8087 	beq.w	8002b8a <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <xTaskPriorityInherit+0x130>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d276      	bcs.n	8002b78 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db06      	blt.n	8002aa0 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a92:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <xTaskPriorityInherit+0x130>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f1c3 0205 	rsb	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	6959      	ldr	r1, [r3, #20]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <xTaskPriorityInherit+0x134>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4299      	cmp	r1, r3
 8002ab6:	d157      	bne.n	8002b68 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe f8ed 	bl	8000c9c <uxListRemove>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2201      	movs	r2, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <xTaskPriorityInherit+0x138>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	4a30      	ldr	r2, [pc, #192]	; (8002b9c <xTaskPriorityInherit+0x138>)
 8002adc:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <xTaskPriorityInherit+0x130>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <xTaskPriorityInherit+0x138>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <xTaskPriorityInherit+0x138>)
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	4926      	ldr	r1, [pc, #152]	; (8002b98 <xTaskPriorityInherit+0x134>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	3204      	adds	r2, #4
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1d1a      	adds	r2, r3, #4
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <xTaskPriorityInherit+0x134>)
 8002b3e:	441a      	add	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	615a      	str	r2, [r3, #20]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	4913      	ldr	r1, [pc, #76]	; (8002b98 <xTaskPriorityInherit+0x134>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	480f      	ldr	r0, [pc, #60]	; (8002b98 <xTaskPriorityInherit+0x134>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4403      	add	r3, r0
 8002b64:	6019      	str	r1, [r3, #0]
 8002b66:	e004      	b.n	8002b72 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <xTaskPriorityInherit+0x130>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e008      	b.n	8002b8a <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <xTaskPriorityInherit+0x130>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d201      	bcs.n	8002b8a <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002b8a:	697b      	ldr	r3, [r7, #20]
    }
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200050a4 	.word	0x200050a4
 8002b98:	200050a8 	.word	0x200050a8
 8002b9c:	20005158 	.word	0x20005158

08002ba0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 808c 	beq.w	8002cd0 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002bb8:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <xTaskPriorityDisinherit+0x13c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d00a      	beq.n	8002bd8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	613b      	str	r3, [r7, #16]
    }
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	60fb      	str	r3, [r7, #12]
    }
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	1e5a      	subs	r2, r3, #1
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d061      	beq.n	8002cd0 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d15d      	bne.n	8002cd0 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f83f 	bl	8000c9c <uxListRemove>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <xTaskPriorityDisinherit+0x140>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4013      	ands	r3, r2
 8002c36:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <xTaskPriorityDisinherit+0x140>)
 8002c38:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f1c3 0205 	rsb	r2, r3, #5
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	2201      	movs	r2, #1
 8002c54:	409a      	lsls	r2, r3
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <xTaskPriorityDisinherit+0x140>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <xTaskPriorityDisinherit+0x140>)
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	491f      	ldr	r1, [pc, #124]	; (8002ce4 <xTaskPriorityDisinherit+0x144>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3304      	adds	r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	3204      	adds	r2, #4
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1d1a      	adds	r2, r3, #4
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <xTaskPriorityDisinherit+0x144>)
 8002ca4:	441a      	add	r2, r3
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	615a      	str	r2, [r3, #20]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cae:	490d      	ldr	r1, [pc, #52]	; (8002ce4 <xTaskPriorityDisinherit+0x144>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <xTaskPriorityDisinherit+0x144>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4403      	add	r3, r0
 8002cca:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
    }
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200050a4 	.word	0x200050a4
 8002ce0:	20005158 	.word	0x20005158
 8002ce4:	200050a8 	.word	0x200050a8

08002ce8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a1 	beq.w	8002e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	613b      	str	r3, [r7, #16]
    }
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d902      	bls.n	8002d30 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e002      	b.n	8002d36 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f000 8081 	beq.w	8002e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d17b      	bne.n	8002e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002d4c:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10a      	bne.n	8002d6c <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	60fb      	str	r3, [r7, #12]
    }
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db04      	blt.n	8002d8a <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f1c3 0205 	rsb	r2, r3, #5
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	6959      	ldr	r1, [r3, #20]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4299      	cmp	r1, r3
 8002d9e:	d151      	bne.n	8002e44 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd ff79 	bl	8000c9c <uxListRemove>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2201      	movs	r2, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002dc4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	491c      	ldr	r1, [pc, #112]	; (8002e50 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3304      	adds	r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	3204      	adds	r2, #4
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	1d1a      	adds	r2, r3, #4
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002e1c:	441a      	add	r2, r3
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	615a      	str	r2, [r3, #20]
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	490a      	ldr	r1, [pc, #40]	; (8002e50 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c59      	adds	r1, r3, #1
 8002e36:	4806      	ldr	r0, [pc, #24]	; (8002e50 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4403      	add	r3, r0
 8002e42:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200050a4 	.word	0x200050a4
 8002e50:	200050a8 	.word	0x200050a8
 8002e54:	20005158 	.word	0x20005158

08002e58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6a:	3201      	adds	r2, #1
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 8002e6e:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8002e70:	681b      	ldr	r3, [r3, #0]
    }
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	200050a4 	.word	0x200050a4

08002e80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <prvAddCurrentTaskToDelayedList+0x90>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3304      	adds	r3, #4
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ff00 	bl	8000c9c <uxListRemove>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8002eb8:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the kernel
             * will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60bb      	str	r3, [r7, #8]

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	605a      	str	r2, [r3, #4]

            if( xTimeToWake < xConstTickCount )
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d209      	bcs.n	8002ee6 <prvAddCurrentTaskToDelayedList+0x66>
            {
                /* Wake time has overflowed.  Place this item in the overflow list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f7fd fea3 	bl	8000c2a <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ee4:	e010      	b.n	8002f08 <prvAddCurrentTaskToDelayedList+0x88>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7fd fe99 	bl	8000c2a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d202      	bcs.n	8002f08 <prvAddCurrentTaskToDelayedList+0x88>
                    xNextTaskUnblockTime = xTimeToWake;
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20005154 	.word	0x20005154
 8002f14:	200050a4 	.word	0x200050a4
 8002f18:	20005158 	.word	0x20005158
 8002f1c:	20005138 	.word	0x20005138
 8002f20:	20005134 	.word	0x20005134
 8002f24:	20005170 	.word	0x20005170

08002f28 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002f32:	f000 fa47 	bl	80033c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <xTimerCreateTimerTask+0x54>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <xTimerCreateTimerTask+0x58>)
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2303      	movs	r3, #3
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	490e      	ldr	r1, [pc, #56]	; (8002f84 <xTimerCreateTimerTask+0x5c>)
 8002f4c:	480e      	ldr	r0, [pc, #56]	; (8002f88 <xTimerCreateTimerTask+0x60>)
 8002f4e:	f7fe feb7 	bl	8001cc0 <xTaskCreate>
 8002f52:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	603b      	str	r3, [r7, #0]
    }
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002f70:	687b      	ldr	r3, [r7, #4]
    }
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200051ac 	.word	0x200051ac
 8002f80:	200051b0 	.word	0x200051b0
 8002f84:	08003500 	.word	0x08003500
 8002f88:	08003031 	.word	0x08003031

08002f8c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002f98:	e008      	b.n	8002fac <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	18d1      	adds	r1, r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f8dd 	bl	8003178 <prvInsertTimerInActiveList>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ea      	bne.n	8002f9a <prvReloadTimer+0xe>
        }
    }
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <prvProcessExpiredTimer+0x5c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fe57 	bl	8000c9c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ffc3 	bl	8002f8c <prvReloadTimer>
 8003006:	e008      	b.n	800301a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	4798      	blx	r3
    }
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200051a4 	.word	0x200051a4

08003030 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003038:	f107 0308 	add.w	r3, r7, #8
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f857 	bl	80030f0 <prvGetNextExpireTime>
 8003042:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4619      	mov	r1, r3
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f803 	bl	8003054 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800304e:	f000 f8d5 	bl	80031fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003052:	e7f1      	b.n	8003038 <prvTimerTask+0x8>

08003054 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800305e:	f7ff f825 	bl	80020ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003062:	f107 0308 	add.w	r3, r7, #8
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f866 	bl	8003138 <prvSampleTimeNow>
 800306c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d130      	bne.n	80030d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <prvProcessTimerOrBlockTask+0x3c>
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	429a      	cmp	r2, r3
 8003080:	d806      	bhi.n	8003090 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003082:	f7ff f821 	bl	80020c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ffa1 	bl	8002fd0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800308e:	e024      	b.n	80030da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <prvProcessTimerOrBlockTask+0x90>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <prvProcessTimerOrBlockTask+0x50>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <prvProcessTimerOrBlockTask+0x52>
 80030a4:	2300      	movs	r3, #0
 80030a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <prvProcessTimerOrBlockTask+0x94>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fe fdcf 	bl	8001c58 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80030ba:	f7ff f805 	bl	80020c8 <xTaskResumeAll>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <prvProcessTimerOrBlockTask+0x98>)
 80030c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	f3bf 8f6f 	isb	sy
    }
 80030d4:	e001      	b.n	80030da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80030d6:	f7fe fff7 	bl	80020c8 <xTaskResumeAll>
    }
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200051a8 	.word	0x200051a8
 80030e8:	200051ac 	.word	0x200051ac
 80030ec:	e000ed04 	.word	0xe000ed04

080030f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <prvGetNextExpireTime+0x44>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <prvGetNextExpireTime+0x16>
 8003102:	2201      	movs	r2, #1
 8003104:	e000      	b.n	8003108 <prvGetNextExpireTime+0x18>
 8003106:	2200      	movs	r2, #0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <prvGetNextExpireTime+0x44>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e001      	b.n	8003124 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003124:	68fb      	ldr	r3, [r7, #12]
    }
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	200051a4 	.word	0x200051a4

08003138 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003140:	f7ff f8be 	bl	80022c0 <xTaskGetTickCount>
 8003144:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <prvSampleTimeNow+0x3c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d205      	bcs.n	800315c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003150:	f000 f912 	bl	8003378 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e002      	b.n	8003162 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <prvSampleTimeNow+0x3c>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003168:	68fb      	ldr	r3, [r7, #12]
    }
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200051b4 	.word	0x200051b4

08003178 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d812      	bhi.n	80031c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	e01b      	b.n	80031ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <prvInsertTimerInActiveList+0x7c>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f7fd fd34 	bl	8000c2a <vListInsert>
 80031c2:	e012      	b.n	80031ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d206      	bcs.n	80031da <prvInsertTimerInActiveList+0x62>
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e007      	b.n	80031ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <prvInsertTimerInActiveList+0x80>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f7fd fd20 	bl	8000c2a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80031ea:	697b      	ldr	r3, [r7, #20]
    }
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	200051a8 	.word	0x200051a8
 80031f8:	200051a4 	.word	0x200051a4

080031fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003202:	e0a6      	b.n	8003352 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f2c0 80a2 	blt.w	8003350 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3304      	adds	r3, #4
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fd3d 	bl	8000c9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff87 	bl	8003138 <prvSampleTimeNow>
 800322a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	3b01      	subs	r3, #1
 8003230:	2b08      	cmp	r3, #8
 8003232:	f200 808e 	bhi.w	8003352 <prvProcessReceivedCommands+0x156>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <prvProcessReceivedCommands+0x40>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003261 	.word	0x08003261
 8003240:	08003261 	.word	0x08003261
 8003244:	080032c9 	.word	0x080032c9
 8003248:	080032dd 	.word	0x080032dd
 800324c:	08003327 	.word	0x08003327
 8003250:	08003261 	.word	0x08003261
 8003254:	08003261 	.word	0x08003261
 8003258:	080032c9 	.word	0x080032c9
 800325c:	080032dd 	.word	0x080032dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	18d1      	adds	r1, r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	69f8      	ldr	r0, [r7, #28]
 8003280:	f7ff ff7a 	bl	8003178 <prvInsertTimerInActiveList>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d063      	beq.n	8003352 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	4413      	add	r3, r2
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4619      	mov	r1, r3
 80032a4:	69f8      	ldr	r0, [r7, #28]
 80032a6:	f7ff fe71 	bl	8002f8c <prvReloadTimer>
 80032aa:	e008      	b.n	80032be <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	69f8      	ldr	r0, [r7, #28]
 80032c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80032c6:	e044      	b.n	8003352 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 80032da:	e03a      	b.n	8003352 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	617b      	str	r3, [r7, #20]
    }
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	18d1      	adds	r1, r2, r3
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	69f8      	ldr	r0, [r7, #28]
 8003320:	f7ff ff2a 	bl	8003178 <prvInsertTimerInActiveList>
                        break;
 8003324:	e015      	b.n	8003352 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003334:	69f8      	ldr	r0, [r7, #28]
 8003336:	f7fd fb2d 	bl	8000994 <vPortFree>
 800333a:	e00a      	b.n	8003352 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800334e:	e000      	b.n	8003352 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003350:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <prvProcessReceivedCommands+0x178>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f107 0108 	add.w	r1, r7, #8
 800335a:	2200      	movs	r2, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe f967 	bl	8001630 <xQueueReceive>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af4d 	bne.w	8003204 <prvProcessReceivedCommands+0x8>
        }
    }
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200051ac 	.word	0x200051ac

08003378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800337e:	e009      	b.n	8003394 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <prvSwitchTimerLists+0x44>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800338a:	f04f 31ff 	mov.w	r1, #4294967295
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f7ff fe1e 	bl	8002fd0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <prvSwitchTimerLists+0x44>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <prvSwitchTimerLists+0x44>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <prvSwitchTimerLists+0x48>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <prvSwitchTimerLists+0x44>)
 80033aa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <prvSwitchTimerLists+0x48>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6013      	str	r3, [r2, #0]
    }
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200051a4 	.word	0x200051a4
 80033c0:	200051a8 	.word	0x200051a8

080033c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80033c8:	f7fd fe5e 	bl	8001088 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <prvCheckForValidListAndQueue+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d113      	bne.n	80033fc <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 80033d4:	480c      	ldr	r0, [pc, #48]	; (8003408 <prvCheckForValidListAndQueue+0x44>)
 80033d6:	f7fd fbfb 	bl	8000bd0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80033da:	480c      	ldr	r0, [pc, #48]	; (800340c <prvCheckForValidListAndQueue+0x48>)
 80033dc:	f7fd fbf8 	bl	8000bd0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <prvCheckForValidListAndQueue+0x4c>)
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <prvCheckForValidListAndQueue+0x44>)
 80033e4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <prvCheckForValidListAndQueue+0x50>)
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <prvCheckForValidListAndQueue+0x48>)
 80033ea:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80033ec:	2200      	movs	r2, #0
 80033ee:	210c      	movs	r1, #12
 80033f0:	2005      	movs	r0, #5
 80033f2:	f7fd ffb1 	bl	8001358 <xQueueGenericCreate>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4a02      	ldr	r2, [pc, #8]	; (8003404 <prvCheckForValidListAndQueue+0x40>)
 80033fa:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80033fc:	f7fd fe74 	bl	80010e8 <vPortExitCritical>
    }
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200051ac 	.word	0x200051ac
 8003408:	2000517c 	.word	0x2000517c
 800340c:	20005190 	.word	0x20005190
 8003410:	200051a4 	.word	0x200051a4
 8003414:	200051a8 	.word	0x200051a8

08003418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8003418:	480d      	ldr	r0, [pc, #52]	; (8003450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800341a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800341c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <LoopForever+0x6>)
  ldr r1, =_edata
 8003422:	490d      	ldr	r1, [pc, #52]	; (8003458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003424:	4a0d      	ldr	r2, [pc, #52]	; (800345c <LoopForever+0xe>)
  movs r3, #0
 8003426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003428:	e002      	b.n	8003430 <LoopCopyDataInit>

0800342a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800342c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800342e:	3304      	adds	r3, #4

08003430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003434:	d3f9      	bcc.n	800342a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003438:	4c0a      	ldr	r4, [pc, #40]	; (8003464 <LoopForever+0x16>)
  movs r3, #0
 800343a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800343c:	e001      	b.n	8003442 <LoopFillZerobss>

0800343e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800343e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003440:	3204      	adds	r2, #4

08003442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003444:	d3fb      	bcc.n	800343e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003446:	f000 f811 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800344a:	f7fd fc9d 	bl	8000d88 <main>

0800344e <LoopForever>:

LoopForever:
    b LoopForever
 800344e:	e7fe      	b.n	800344e <LoopForever>
   ldr   r0, =_estack
 8003450:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003458:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800345c:	08003510 	.word	0x08003510
  ldr r2, =_sbss
 8003460:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003464:	200051b8 	.word	0x200051b8

08003468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003468:	e7fe      	b.n	8003468 <ADC_IRQHandler>
	...

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4d0d      	ldr	r5, [pc, #52]	; (80034a4 <__libc_init_array+0x38>)
 8003470:	4c0d      	ldr	r4, [pc, #52]	; (80034a8 <__libc_init_array+0x3c>)
 8003472:	1b64      	subs	r4, r4, r5
 8003474:	10a4      	asrs	r4, r4, #2
 8003476:	2600      	movs	r6, #0
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <__libc_init_array+0x40>)
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <__libc_init_array+0x44>)
 8003480:	f000 f82e 	bl	80034e0 <_init>
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	2600      	movs	r6, #0
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	f855 3b04 	ldr.w	r3, [r5], #4
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	f855 3b04 	ldr.w	r3, [r5], #4
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	08003508 	.word	0x08003508
 80034a8:	08003508 	.word	0x08003508
 80034ac:	08003508 	.word	0x08003508
 80034b0:	0800350c 	.word	0x0800350c

080034b4 <memcpy>:
 80034b4:	440a      	add	r2, r1
 80034b6:	4291      	cmp	r1, r2
 80034b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80034bc:	d100      	bne.n	80034c0 <memcpy+0xc>
 80034be:	4770      	bx	lr
 80034c0:	b510      	push	{r4, lr}
 80034c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034ca:	4291      	cmp	r1, r2
 80034cc:	d1f9      	bne.n	80034c2 <memcpy+0xe>
 80034ce:	bd10      	pop	{r4, pc}

080034d0 <memset>:
 80034d0:	4402      	add	r2, r0
 80034d2:	4603      	mov	r3, r0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d100      	bne.n	80034da <memset+0xa>
 80034d8:	4770      	bx	lr
 80034da:	f803 1b01 	strb.w	r1, [r3], #1
 80034de:	e7f9      	b.n	80034d4 <memset+0x4>

080034e0 <_init>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	bf00      	nop
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr

080034ec <_fini>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr
